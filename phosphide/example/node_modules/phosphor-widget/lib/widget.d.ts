import { IDisposable } from 'phosphor-disposable';
import { IMessageHandler, Message } from 'phosphor-messaging';
import { NodeWrapper } from 'phosphor-nodewrapper';
import { Property } from 'phosphor-properties';
import { Queue } from 'phosphor-queue';
import { ISignal, Signal } from 'phosphor-signaling';
import { ResizeMessage } from './messages';
import { Panel } from './panel';
import { Title } from './title';
/**
 * The base class of the Phosphor widget hierarchy.
 *
 * #### Notes
 * This class will typically be subclassed in order to create a useful
 * widget. However, it can be used by itself to host externally created
 * content. Simply instantiate an empty widget and add the DOM content
 * directly to the widget's `node`. The widget and its content can be
 * inserted into any Phosphor widget hierarchy.
 */
export declare class Widget extends NodeWrapper implements IDisposable, IMessageHandler {
    /**
     * A singleton `'update-request'` message.
     *
     * #### Notes
     * This message can be dispatched to supporting widgets in order to
     * update their content. Not all widgets will respond to messages of
     * this type.
     *
     * This message is typically used to update the position and size of
     * a panel's children, or to update a widget's content to reflect the
     * current widget state.
     *
     * Messages of this type are compressed by default.
     *
     * **See also:** [[update]], [[onUpdateRequest]]
     */
    static MsgUpdateRequest: Message;
    /**
     * A singleton `'close-request'` message.
     *
     * #### Notes
     * This message should be dispatched to a widget when it should close
     * and remove itself from the widget hierarchy.
     *
     * Messages of this type are compressed by default.
     *
     * **See also:** [[close]], [[onCloseRequest]]
     */
    static MsgCloseRequest: Message;
    /**
     * A singleton `'after-show'` message.
     *
     * #### Notes
     * This message is sent to a widget after it becomes visible.
     *
     * This message is **not** sent when the widget is attached.
     *
     * **See also:** [[isVisible]], [[onAfterShow]]
     */
    static MsgAfterShow: Message;
    /**
     * A singleton `'before-hide'` message.
     *
     * #### Notes
     * This message is sent to a widget before it becomes not-visible.
     *
     * This message is **not** sent when the widget is detached.
     *
     * **See also:** [[isVisible]], [[onBeforeHide]]
     */
    static MsgBeforeHide: Message;
    /**
     * A singleton `'after-attach'` message.
     *
     * #### Notes
     * This message is sent to a widget after it is attached to the DOM.
     *
     * **See also:** [[isAttached]], [[onAfterAttach]]
     */
    static MsgAfterAttach: Message;
    /**
     * A singleton `'before-detach'` message.
     *
     * #### Notes
     * This message is sent to a widget before it is detached from the DOM.
     *
     * **See also:** [[isAttached]], [[onBeforeDetach]]
     */
    static MsgBeforeDetach: Message;
    /**
     * Attach a widget to a host DOM node.
     *
     * @param widget - The widget to attach to the DOM.
     *
     * @param host - The node to use as the widget's host.
     *
     * @throws Will throw an error if the widget is not a root widget,
     *   if the widget is already attached to the DOM, or if the host
     *   is not attached to the DOM.
     *
     * #### Notes
     * The function should be used in lieu of manual DOM attachment. It
     * ensures that an `'after-attach'` message is properly dispatched
     * to the widget hierarchy.
     */
    static attach(widget: Widget, host: HTMLElement): void;
    /**
     * Detach a widget from its host DOM node.
     *
     * @param widget - The widget to detach from the DOM.
     *
     * @throws Will throw an error if the widget is not a root widget,
     *   or if the widget is not attached to the DOM.
     *
     * #### Notes
     * The function should be used in lieu of manual DOM detachment. It
     * ensures that a `'before-detach'` message is properly dispatched
     * to the widget hierarchy.
     */
    static detach(widget: Widget): void;
    /**
     * A signal emitted when the widget is disposed.
     *
     * **See also:** [[disposed]], [[isDisposed]]
     */
    static disposedSignal: Signal<Widget, void>;
    /**
     * A property descriptor which controls the hidden state of a widget.
     *
     * #### Notes
     * This controls whether a widget is explicitly hidden.
     *
     * Hiding a widget will cause the widget and all of its descendants
     * to become not-visible.
     *
     * This will toggle the presence of `'p-mod-hidden'` on a widget. It
     * will also dispatch `'after-show'` and `'before-hide'` messages as
     * appropriate.
     *
     * The default value is `false`.
     *
     * **See also:** [[hidden]], [[isVisible]]
     */
    static hiddenProperty: Property<Widget, boolean>;
    /**
     * Construct a new widget.
     */
    constructor();
    /**
     * Dispose of the widget and its descendants.
     *
     * #### Notes
     * It is generally unsafe to use the widget after it is disposed.
     *
     * If this method is called more than once, all calls made after
     * the first will be a no-op.
     */
    dispose(): void;
    /**
     * A signal emitted when the widget is disposed.
     *
     * #### Notes
     * This is a pure delegate to the [[disposedSignal]].
     */
    disposed: ISignal<Widget, void>;
    /**
     * Test whether the widget's node is attached to the DOM.
     *
     * #### Notes
     * This is a read-only property which is always safe to access.
     *
     * **See also:** [[attach]], [[detach]]
     */
    isAttached: boolean;
    /**
     * Test whether the widget has been disposed.
     *
     * #### Notes
     * This is a read-only property which is always safe to access.
     *
     * **See also:** [[disposed]]
     */
    isDisposed: boolean;
    /**
     * Test whether the widget is visible.
     *
     * #### Notes
     * A widget is visible when it is attached to the DOM, is not
     * explicitly hidden, and has no explicitly hidden ancestors.
     *
     * This is a read-only property which is always safe to access.
     *
     * **See also:** [[hidden]]
     */
    isVisible: boolean;
    /**
     * Get whether the widget is explicitly hidden.
     *
     * #### Notes
     * This is a pure delegate to the [[hiddenProperty]].
     *
     * **See also:** [[isVisible]]
     */
    /**
     * Set whether the widget is explicitly hidden.
     *
     * #### Notes
     * This is a pure delegate to the [[hiddenProperty]].
     *
     * **See also:** [[isVisible]]
     */
    hidden: boolean;
    /**
     * Get the title data object for the widget.
     *
     * #### Notes
     * The title data is used by some container widgets when displaying
     * the widget along with a title, such as a tab panel or dock panel.
     *
     * Not all widgets will make use of the title data, so it is created
     * on-demand the first time it is accessed.
     */
    title: Title;
    /**
     * Get the parent panel of the widget.
     *
     * #### Notes
     * This will be `null` if the widget does not have a parent.
     */
    /**
     * Set the parent panel of the widget.
     *
     * #### Notes
     * If the panel is the current parent, this is no-op. Otherwise, the
     * widget will be removed from its current parent and added as the
     * last child of the given panel.
     *
     * Setting this to `null` or `undefined` will unparent the widget.
     */
    parent: Panel;
    /**
     * Post an `'update-request'` message to the widget.
     *
     * #### Notes
     * This is a simple convenience method for posting the message.
     *
     * **See also:** [[MsgUpdateRequest]], [[onUpdateRequest]]
     */
    update(): void;
    /**
     * Send a `'close-request'` message to the widget.
     *
     * #### Notes
     * This is a simple convenience method for sending the message.
     *
     * **See also:** [[MsgCloseRequest]], [[onCloseRequest]]
     */
    close(): void;
    /**
     * Process a message sent to the widget.
     *
     * @param msg - The message sent to the widget.
     *
     * #### Notes
     * Subclasses may reimplement this method as needed.
     */
    processMessage(msg: Message): void;
    /**
     * Compress a message posted to the widget.
     *
     * @param msg - The message posted to the widget.
     *
     * @param pending - The queue of pending messages for the widget.
     *
     * @returns `true` if the message was compressed and should be
     *   dropped, or `false` if the message should be enqueued for
     *   delivery as normal.
     *
     * #### Notes
     * The default implementation compresses `'update-request'`.
     *
     * Subclasses may reimplement this method as needed.
     */
    compressMessage(msg: Message, pending: Queue<Message>): boolean;
    /**
     * A message handler invoked on a `'close-request'` message.
     *
     * #### Notes
     * The default implementation of this handler will unparent or detach
     * the widget as appropriate.
     *
     * Subclasses may reimplement this handler for custom close behavior.
     *
     * **See also:** [[close]], [[MsgCloseRequest]]
     */
    protected onCloseRequest(msg: Message): void;
    /**
     * A message handler invoked on a `'resize'` message.
     *
     * The default implementation of this handler is a no-op.
     */
    protected onResize(msg: ResizeMessage): void;
    /**
     * A message handler invoked on an `'update-request'` message.
     *
     * The default implementation of this handler is a no-op.
     *
     * **See also:** [[update]], [[MsgUpdateRequest]]
     */
    protected onUpdateRequest(msg: Message): void;
    /**
     * A message handler invoked on an `'after-show'` message.
     *
     * The default implementation of this handler is a no-op.
     *
     * **See also:** [[MsgAfterShow]]
     */
    protected onAfterShow(msg: Message): void;
    /**
     * A message handler invoked on a `'before-hide'` message.
     *
     * The default implementation of this handler is a no-op.
     *
     * **See also:** [[MsgBeforeHide]]
     */
    protected onBeforeHide(msg: Message): void;
    /**
     * A message handler invoked on an `'after-attach'` message.
     *
     * The default implementation of this handler is a no-op.
     *
     * **See also:** [[MsgAfterAttach]]
     */
    protected onAfterAttach(msg: Message): void;
    /**
     * A message handler invoked on a `'before-detach'` message.
     *
     * The default implementation of this handler is a no-op.
     *
     * **See also:** [[MsgBeforeDetach]]
     */
    protected onBeforeDetach(msg: Message): void;
    private _flags;
    private _parent;
}
