import { IChangedArgs, Property } from 'phosphor-properties';
import { ISignal, Signal } from 'phosphor-signaling';
/**
 * A type alias for a title edit handler function.
 *
 * **See also:** [[editHandlerProperty]]
 */
export declare type EditHandler = (text: string) => void;
/**
 * An object which holds data related to a widget title.
 */
export declare class Title {
    /**
     * A signal emitted when the title state changes.
     *
     * **See also:** [[changed]]
     */
    static changedSignal: Signal<Title, IChangedArgs<any>>;
    /**
     * The property descriptor for the title text.
     *
     * This will be used as the display text in title contexts.
     *
     * The default value is an empty string.
     *
     * **See also:** [[text]]
     */
    static textProperty: Property<Title, string>;
    /**
     * The property descriptor for the title icon class.
     *
     * This will be added to the class name of the title icon node.
     *
     * Multiple class names can be separated with whitespace.
     *
     * The default value is an empty string.
     *
     * **See also:** [[icon]]
     */
    static iconProperty: Property<Title, string>;
    /**
     * The property descriptor for the title editable state.
     *
     * This controls whether the title is editable by the user.
     *
     * The default value is `false`.
     *
     * **See also:** [[editable]]
     */
    static editableProperty: Property<Title, boolean>;
    /**
     * The property descriptor for the title edit handler.
     *
     * If the title is user editable, this handler will be invoked when
     * the text is edited by the user. The handler should update its own
     * internal state and then update the title text as appropriate. If
     * this is not provided, the title text will be updated directly.
     *
     * The default value is `null`.
     *
     * **See also:** [[editHandler]]
     */
    static editHandlerProperty: Property<Title, (text: string) => void>;
    /**
     * The property descriptor for the title closable state.
     *
     * This controls whether the title area shows a close icon.
     *
     * The default value is `false`.
     *
     * **See also:** [[closable]]
     */
    static closableProperty: Property<Title, boolean>;
    /**
     * The property descriptor for the title extra class name.
     *
     * This will be added to the class name of the title area node.
     *
     * Multiple class names can be separated with whitespace.
     *
     * The default value is an empty string.
     *
     * **See also:** [[className]]
     */
    static classNameProperty: Property<Title, string>;
    /**
     * A signal emitted when the title state changes.
     *
     * #### Notes
     * This is a pure delegate to the [[changedSignal]].
     */
    changed: ISignal<Title, IChangedArgs<any>>;
    /**
     * Get the text for the title.
     *
     * #### Notes
     * This is a pure delegate to the [[textProperty]].
     */
    /**
     * Set the text for the title.
     *
     * #### Notes
     * This is a pure delegate to the [[textProperty]].
     */
    text: string;
    /**
     * Get the icon class for the title.
     *
     * #### Notes
     * This is a pure delegate to the [[iconProperty]].
     */
    /**
     * Set the icon class for the title.
     *
     * #### Notes
     * This is a pure delegate to the [[iconProperty]].
     */
    icon: string;
    /**
     * Get the editable state for the title.
     *
     * #### Notes
     * This is a pure delegate to the [[editableProperty]].
     */
    /**
     * Set the editable state for the title.
     *
     * #### Notes
     * This is a pure delegate to the [[editableProperty]].
     */
    editable: boolean;
    /**
     * Get the edit handler for the title.
     *
     * #### Notes
     * This is a pure delegate to the [[editHandlerProperty]].
     */
    /**
     * Set the edit handler for the title.
     *
     * #### Notes
     * This is a pure delegate to the [[editHandlerProperty]].
     */
    editHandler: EditHandler;
    /**
     * Get the closable state for the title.
     *
     * #### Notes
     * This is a pure delegate to the [[closableProperty]].
     */
    /**
     * Set the closable state for the title.
     *
     * #### Notes
     * This is a pure delegate to the [[closableProperty]].
     */
    closable: boolean;
    /**
     * Get the extra class name for the title.
     *
     * #### Notes
     * This is a pure delegate to the [[classNameProperty]].
     */
    /**
     * Set the extra class name for the title.
     *
     * #### Notes
     * This is a pure delegate to the [[classNameProperty]].
     */
    className: string;
}
