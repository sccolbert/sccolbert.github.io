{
  "name": "phosphor-arrays",
  "version": "1.0.6",
  "description": "A collection of array utility functions.",
  "main": "lib/index.js",
  "typings": "lib/index.d.ts",
  "dependencies": {},
  "devDependencies": {
    "coveralls": "^2.11.4",
    "expect.js": "^0.3.1",
    "istanbul": "^0.3.19",
    "mocha": "^2.2.5",
    "rimraf": "^2.4.2",
    "typedoc": "^0.3.11",
    "typescript": "^1.6.2"
  },
  "scripts": {
    "clean": "rimraf lib && rimraf test/build && rimraf test/coverage",
    "build:src": "tsc --project src",
    "build:test": "tsc --project test/src",
    "build": "npm run build:src && npm run build:test",
    "docs": "rimraf docs/api && typedoc --options scripts/tdoptions.json",
    "prepublish": "npm run build",
    "test": "mocha test/build/index.js",
    "test:coverage": "istanbul cover --dir test/coverage node_modules/mocha/bin/_mocha -- test/build/index.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/phosphorjs/phosphor-arrays.git"
  },
  "files": [
    "lib/index.js",
    "lib/index.d.ts"
  ],
  "keywords": [
    "array",
    "arrays",
    "utility",
    "utilities"
  ],
  "author": {
    "name": "S. Chris Colbert",
    "email": "sccolbert@gmail.com"
  },
  "license": "BSD-3-Clause",
  "bugs": {
    "url": "https://github.com/phosphorjs/phosphor-arrays/issues"
  },
  "homepage": "https://github.com/phosphorjs/phosphor-arrays",
  "readme": "phosphor-arrays\r\n===============\r\n\r\n[![Build Status](https://travis-ci.org/phosphorjs/phosphor-arrays.svg)](https://travis-ci.org/phosphorjs/phosphor-arrays?branch=master)\r\n[![Coverage Status](https://coveralls.io/repos/phosphorjs/phosphor-arrays/badge.svg?branch=master&service=github)](https://coveralls.io/github/phosphorjs/phosphor-arrays?branch=master)\r\n\r\nA collection of array utility functions.\r\n\r\n[API Docs](http://phosphorjs.github.io/phosphor-arrays/api/)\r\n\r\n\r\nPackage Install\r\n---------------\r\n\r\n**Prerequisites**\r\n- [node](http://nodejs.org/)\r\n\r\n```bash\r\nnpm install --save phosphor-arrays\r\n```\r\n\r\n\r\nSource Build\r\n------------\r\n\r\n**Prerequisites**\r\n- [git](http://git-scm.com/)\r\n- [node](http://nodejs.org/)\r\n\r\n```bash\r\ngit clone https://github.com/phosphorjs/phosphor-arrays.git\r\ncd phosphor-arrays\r\nnpm install\r\n```\r\n\r\n**Rebuild**\r\n```bash\r\nnpm run clean\r\nnpm run build\r\n```\r\n\r\n\r\nRun Tests\r\n---------\r\n\r\nFollow the source build instructions first.\r\n\r\n```bash\r\nnpm test\r\n```\r\n\r\n\r\nBuild Docs\r\n----------\r\n\r\nFollow the source build instructions first.\r\n\r\n```bash\r\nnpm run docs\r\n```\r\n\r\nNavigate to `docs/index.html`.\r\n\r\n\r\nSupported Runtimes\r\n------------------\r\n\r\nThe runtime versions which are currently *known to work* are listed below.\r\nEarlier versions may also work, but come with no guarantees.\r\n\r\n- Node 0.12.7+\r\n- IE 11+\r\n- Firefox 32+\r\n- Chrome 38+\r\n\r\n\r\nBundle for the Browser\r\n----------------------\r\n\r\nFollow the package install instructions first.\r\n\r\n```bash\r\nnpm install --save-dev browserify\r\nbrowserify myapp.js -o mybundle.js\r\n```\r\n\r\n\r\nUsage Examples\r\n--------------\r\n\r\n**Note:** This module is fully compatible with Node/Babel/ES6/ES5. Simply\r\nomit the type declarations when using a language other than TypeScript.\r\n\r\n```typescript\r\nimport * as arrays\r\n  from 'phosphor-arrays';\r\n\r\n\r\nfunction logger(value: number): void {\r\n  console.log(value);\r\n}\r\n\r\n\r\n// for-each with optional start index and wrap around\r\nlet data = [1, 2, 3, 4];\r\narrays.forEach(data, logger);           // logs 1, 2, 3, 4\r\narrays.forEach(data, logger, 2);        // logs 3, 4\r\narrays.forEach(data, logger, 2, true);  // logs 3, 4, 1, 2\r\narrays.forEach(data, (v, i) => {        // 2\r\n  if (v === 3) return i;\r\n});\r\n\r\n\r\n// reverse for-each with optional start index and wrap around\r\nlet data = [1, 2, 3, 4];\r\narrays.rforEach(data, logger);           // logs 4, 3, 2, 1\r\narrays.rforEach(data, logger, 2);        // logs 3, 2, 1\r\narrays.rforEach(data, logger, 2, true);  // logs 3, 2, 1, 4\r\narrays.rforEach(data, (v, i) => {        // 2\r\n  if (v === 3) return i;\r\n});\r\n\r\n\r\nfunction isEven(value: number): boolean {\r\n  return value % 2 === 0;\r\n}\r\n\r\n\r\n// find-index with optional start index and wrap around\r\nlet data = [1, 2, 3, 4, 3, 2, 1];\r\narrays.findIndex(data, isEven);           // 1\r\narrays.findIndex(data, isEven, 4);        // 5\r\narrays.findIndex(data, isEven, 6);        // -1\r\narrays.findIndex(data, isEven, 6, true);  // 1\r\n\r\n\r\n// reverse find-index with optional start index and wrap around\r\nlet data = [1, 2, 3, 4, 3, 2, 1];\r\narrays.rfindIndex(data, isEven);           // 5\r\narrays.rfindIndex(data, isEven, 4);        // 3\r\narrays.rfindIndex(data, isEven, 0);        // -1\r\narrays.rfindIndex(data, isEven, 0, true);  // 5\r\n\r\n\r\n// find-value with optional start index and wrap around\r\nlet data = [1, 2, 3, 4, 3, 2, 1];\r\narrays.find(data, isEven);           // 2\r\narrays.find(data, isEven, 4);        // 2\r\narrays.find(data, isEven, 6);        // undefined\r\narrays.find(data, isEven, 6, true);  // 2\r\n\r\n\r\n// reverse find-value with optional start index and wrap around\r\nlet data = [1, 2, 3, 4, 3, 2, 1];\r\narrays.rfind(data, isEven);           // 2\r\narrays.rfind(data, isEven, 4);        // 4\r\narrays.rfind(data, isEven, 0);        // undefined\r\narrays.rfind(data, isEven, 0, true);  // 2\r\n\r\n\r\n// insert value at a specified index\r\nlet data = [0, 1, 2, 3, 4];\r\narrays.insert(data, 0, 12);  // 0\r\narrays.insert(data, 3, 42);  // 3\r\narrays.insert(data, -9, 9);  // 0\r\narrays.insert(data, 12, 8);  // 8\r\nconsole.log(data);           // [9, 12, 0, 1, 42, 2, 3, 4, 8]\r\n\r\n\r\n// move value from one index to another\r\nlet data = [0, 1, 2, 3, 4];\r\narrays.move(data, 1, 2);   // true\r\narrays.move(data, -1, 0);  // false\r\narrays.move(data, 4, 2);   // true\r\narrays.move(data, 10, 0);  // false\r\nconsole.log(data);         // [0, 2, 4, 1, 3]\r\n\r\n\r\n// remove value at a specified index\r\nlet data = [0, 1, 2, 3, 4];\r\narrays.removeAt(data, 1);   // 1\r\narrays.removeAt(data, 3);   // 4\r\narrays.removeAt(data, 10);  // undefined\r\nconsole.log(data);          // [0, 2, 3]\r\n\r\n\r\n// remove first occurrence of a value\r\nlet data = [0, 1, 2, 3, 4];\r\narrays.remove(data, 1);  // 1\r\narrays.remove(data, 3);  // 2\r\narrays.remove(data, 7);  // -1\r\nconsole.log(data);       // [0, 2, 4]\r\n\r\n\r\n// reverse items subject to an optional range\r\nlet data = [0, 1, 2, 3, 4];\r\narrays.reverse(data, 1, 3);    // [0, 3, 2, 1, 4]\r\narrays.reverse(data, 3);       // [0, 3, 2, 4, 1]\r\narrays.reverse(data);          // [1, 4, 2, 3, 0]\r\n\r\n\r\n// rotate items by positive or negative delta\r\nlet data = [0, 1, 2, 3, 4];\r\narrays.rotate(data, 2);    // [2, 3, 4, 0, 1]\r\narrays.rotate(data, -2);   // [0, 1, 2, 3, 4]\r\narrays.rotate(data, 10);   // [0, 1, 2, 3, 4]\r\narrays.rotate(data, 9);    // [4, 0, 1, 2, 3]\r\n\r\n\r\nfunction numberCmp(a: number, b: number): number {\r\n  return a < b;\r\n}\r\n\r\n\r\n// binary search for first item >= to a value\r\nlet data = [0, 3, 4, 7, 7, 9];\r\narrays.lowerBound(data, 0, numberCmp);   // 0\r\narrays.lowerBound(data, 6, numberCmp);   // 3\r\narrays.lowerBound(data, 7, numberCmp);   // 3\r\narrays.lowerBound(data, -1, numberCmp);  // 0\r\narrays.lowerBound(data, 10, numberCmp);  // 6\r\n\r\n\r\n// binary search for first item > than a value\r\nlet data = [0, 3, 4, 7, 7, 9];\r\narrays.upperBound(data, 0, numberCmp);   // 1\r\narrays.upperBound(data, 6, numberCmp);   // 3\r\narrays.upperBound(data, 7, numberCmp);   // 5\r\narrays.upperBound(data, -1, numberCmp);  // 0\r\narrays.upperBound(data, 10, numberCmp);  // 6\r\n```\r\n",
  "readmeFilename": "README.md",
  "gitHead": "5b67e643689ea41601c989dcd5e1929413fb8126",
  "_id": "phosphor-arrays@1.0.6",
  "_shasum": "4f3401ea9ea6b8899f6e17147ff04fd15dfe8575",
  "_from": "phosphor-arrays@1.0.6"
}
