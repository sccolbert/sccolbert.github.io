import { Message } from 'phosphor-messaging';
import { ISignal, Signal } from 'phosphor-signaling';
import { MenuBase } from './menubase';
import { IMenuItemTemplate, MenuItem } from './menuitem';
/**
 * A widget which displays menu items as a popup menu.
 */
export declare class Menu extends MenuBase {
    /**
     * Create the DOM node for a menu.
     */
    static createNode(): HTMLElement;
    /**
     * A convenience method to create a menu from a template.
     *
     * @param array - The menu item templates for the menu.
     *
     * @returns A new menu created from the menu item templates.
     */
    static fromTemplate(array: IMenuItemTemplate[]): Menu;
    /**
     * A signal emitted when the menu is closed.
     *
     * **See also:** [[closed]]
     */
    static closedSignal: Signal<Menu, void>;
    /**
     * Construct a new menu.
     */
    constructor();
    /**
     * Dispose of the resources held by the menu.
     */
    dispose(): void;
    /**
     * A signal emitted when the menu item is closed.
     *
     * #### Notes
     * This is a pure delegate to the [[closedSignal]].
     */
    closed: ISignal<Menu, void>;
    /**
     * Get the parent menu of the menu.
     *
     * #### Notes
     * This will be null if the menu is not an open submenu.
     */
    parentMenu: Menu;
    /**
     * Get the child menu of the menu.
     *
     * #### Notes
     * This will be null if the menu does not have an open submenu.
     */
    childMenu: Menu;
    /**
     * Find the root menu of this menu hierarchy.
     */
    rootMenu: Menu;
    /**
     * Find the leaf menu of this menu hierarchy.
     */
    leafMenu: Menu;
    /**
     * Get the menu content node.
     *
     * #### Notes
     * This is the node which holds the menu item nodes. Modifying the
     * content of this node without care can lead to undesired behavior.
     */
    contentNode: HTMLElement;
    /**
     * Popup the menu at the specified location.
     *
     * The menu will be opened at the given location unless it will not
     * fully fit on the screen. If it will not fit, it will be adjusted
     * to fit naturally on the screen. The last two optional parameters
     * control whether the provided coordinate value must be obeyed.
     *
     * When the menu is opened as a popup menu, it will handle all key
     * events related to menu navigation as well as closing the menu
     * when the mouse is pressed outside of the menu hierarchy. To
     * prevent these actions, use the `open` method instead.
     *
     * @param x - The client X coordinate of the popup location.
     *
     * @param y - The client Y coordinate of the popup location.
     *
     * @param forceX - Whether the X coordinate must be obeyed.
     *
     * @param forceY - Whether the Y coordinate must be obeyed.
     *
     * **See also:** [[open]]
     */
    popup(x: number, y: number, forceX?: boolean, forceY?: boolean): void;
    /**
     * Open the menu at the specified location.
     *
     * The menu will be opened at the given location unless it will not
     * fully fit on the screen. If it will not fit, it will be adjusted
     * to fit naturally on the screen. The last two optional parameters
     * control whether the provided coordinate value must be obeyed.
     *
     * When the menu is opened with this method, it will not handle key
     * events for navigation, nor will it close itself when the mouse is
     * pressed outside the menu hierarchy. This is useful when using the
     * menu from a menubar, where this menubar should handle these tasks.
     * Use the `popup` method for the alternative behavior.
     *
     * @param x - The client X coordinate of the popup location.
     *
     * @param y - The client Y coordinate of the popup location.
     *
     * @param forceX - Whether the X coordinate must be obeyed.
     *
     * @param forceY - Whether the Y coordinate must be obeyed.
     *
     * **See also:** [[popup]]
     */
    open(x: number, y: number, forceX?: boolean, forceY?: boolean): void;
    /**
     * Handle the DOM events for the menu.
     *
     * @param event - The DOM event sent to the menu.
     *
     * #### Notes
     * This method implements the DOM `EventListener` interface and is
     * called in response to events on the menu's DOM nodes. It should
     * not be called directly by user code.
     */
    handleEvent(event: Event): void;
    /**
     * A method invoked when the menu items change.
     */
    protected onItemsChanged(old: MenuItem[], items: MenuItem[]): void;
    /**
     * A method invoked when the active index changes.
     */
    protected onActiveIndexChanged(old: number, index: number): void;
    /**
     * A method invoked when a menu item should be opened.
     */
    protected onOpenItem(index: number, item: MenuItem): void;
    /**
     * A method invoked when a menu item should be triggered.
     */
    protected onTriggerItem(index: number, item: MenuItem): void;
    /**
     * A message handler invoked on an `'after-attach'` message.
     */
    protected onAfterAttach(msg: Message): void;
    /**
     * A message handler invoked on a `'before-detach'` message.
     */
    protected onBeforeDetach(msg: Message): void;
    /**
     * A handler invoked on an `'update-request'` message.
     */
    protected onUpdateRequest(msg: Message): void;
    /**
     * A message handler invoked on a `'close-request'` message.
     */
    protected onCloseRequest(msg: Message): void;
    /**
     * Handle the `'mouseenter'` event for a menu item.
     */
    private _evtMouseEnter(event);
    /**
     * Handle the `'mouseleave'` event for the menu.
     */
    private _evtMouseLeave(event);
    /**
     * Handle the `'mouseup'` event for the menu.
     */
    private _evtMouseUp(event);
    /**
     * Handle the `'contextmenu'` event for the menu bar.
     */
    private _evtContextMenu(event);
    /**
     * Handle the `'mousedown'` event for the menu.
     *
     * This event listener is attached to the document for a popup menu.
     */
    private _evtMouseDown(event);
    /**
     * Handle the `'keydown'` event for the menu.
     *
     * This event listener is attached to the document for a popup menu.
     */
    private _evtKeyDown(event);
    /**
     * Handle the `'keypress'` event for the menu.
     *
     * This event listener is attached to the document for a popup menu.
     */
    private _evtKeyPress(event);
    /**
     * Synchronize the active item hierarchy starting with the parent.
     *
     * This ensures that the proper child items are activated for the
     * ancestor menu hierarchy and that any pending open or close tasks
     * are canceled.
     */
    private _syncAncestors();
    /**
     * Synchronize the active index with the current child item.
     */
    private _syncChildItem();
    /**
     * Open the menu item's submenu using the node for location.
     *
     * If the given item is already open, this is a no-op.
     *
     * Any pending open operation will be canceled before opening the
     * menu or queuing the delayed task to open the menu.
     */
    private _openChildMenu(item, node, delayed);
    /**
     * Close the currently open child menu using a delayed task.
     *
     * If a task is pending or if there is no child menu, this is a no-op.
     */
    private _closeChildMenu();
    /**
     * Cancel any pending child menu open task.
     */
    private _cancelPendingOpen();
    /**
     * Cancel any pending child menu close task.
     */
    private _cancelPendingClose();
    private _openTimerId;
    private _closeTimerId;
    private _parentMenu;
    private _childMenu;
    private _childItem;
    private _nodes;
}
