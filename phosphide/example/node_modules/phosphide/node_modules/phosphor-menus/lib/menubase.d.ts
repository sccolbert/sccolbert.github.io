import { Property } from 'phosphor-properties';
import { Widget } from 'phosphor-widget';
import { MenuItem } from './menuitem';
/**
 * A base class for implementing widgets which display menu items.
 */
export declare class MenuBase extends Widget {
    /**
     * The property descriptor for the array of menu items.
     *
     * #### Notes
     * This property creates a frozen shallow copy of the assigned items
     * array. This means that the menu items can only be changed in bulk
     * and that in-place modifications to the array are not allowed.
     *
     * **See also:** [[items]]
     */
    static itemsProperty: Property<MenuBase, MenuItem[]>;
    /**
     * The property descriptor for the index of the active menu item.
     *
     * **See also:** [[activeIndex]]
     */
    static activeIndexProperty: Property<MenuBase, number>;
    /**
     * Get the array of menu items.
     *
     * #### Notes
     * This is a pure delegate to the [[itemsProperty]].
     */
    /**
     * Set the array of menu items.
     *
     * #### Notes
     * This is a pure delegate to the [[itemsProperty]].
     */
    items: MenuItem[];
    /**
     * Get the index of the active menu item.
     *
     * #### Notes
     * This is a pure delegate to the [[activeIndexProperty]].
     */
    /**
     * Set the index of the active menu item.
     *
     * #### Notes
     * This is a pure delegate to the [[activeIndexProperty]].
     */
    activeIndex: number;
    /**
     * Activate the next selectable menu item.
     *
     * #### Notes
     * The search starts with the currently active item, and progresses
     * forward until the next selectable item is found. The search will
     * wrap around at the end of the menu.
     */
    activateNextItem(): void;
    /**
     * Activate the previous selectable menu item.
     *
     * #### Notes
     * The search starts with the currently active item, and progresses
     * backward until the next selectable item is found. The search will
     * wrap around at the front of the menu.
     */
    activatePreviousItem(): void;
    /**
     * Activate the next selectable menu item with the given mnemonic.
     *
     * #### Notes
     * The search starts with the currently active item, and progresses
     * forward until the next selectable item with the given mnemonic is
     * found. The search will wrap around at the end of the menu, and the
     * mnemonic matching is case-insensitive.
     */
    activateMnemonicItem(char: string): void;
    /**
     * Open the active menu item.
     *
     * #### Notes
     * This is a no-op if there is no active menu item, or if the active
     * menu item does not have a submenu.
     */
    openActiveItem(): void;
    /**
     * Trigger the active menu item.
     *
     * #### Notes
     * This is a no-op if there is no active menu item. If the active
     * menu item has a submenu, this is equivalent to `openActiveItem`.
     */
    triggerActiveItem(): void;
    /**
     * The coerce handler for the [[activeIndexProperty]].
     *
     * #### Notes
     * Subclasses may reimplement this method as needed.
     */
    protected coerceActiveIndex(index: number): number;
    /**
     * A method invoked when the menu items change.
     *
     * The default implementation of this method is a no-op.
     */
    protected onItemsChanged(old: MenuItem[], items: MenuItem[]): void;
    /**
     * A method invoked when the active index changes.
     *
     * The default implementation of this method is a no-op.
     */
    protected onActiveIndexChanged(old: number, index: number): void;
    /**
     * A method invoked when a menu item should be opened.
     *
     * The default implementation of this handler is a no-op.
     */
    protected onOpenItem(index: number, item: MenuItem): void;
    /**
     * A method invoked when a menu item should be triggered.
     *
     * The default implementation of this handler is a no-op.
     */
    protected onTriggerItem(index: number, item: MenuItem): void;
}
