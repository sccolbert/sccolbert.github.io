import { Message } from 'phosphor-messaging';
import { Menu } from './menu';
import { MenuBase } from './menubase';
import { IMenuItemTemplate, MenuItem } from './menuitem';
/**
 * A widget which displays menu items as a menu bar.
 */
export declare class MenuBar extends MenuBase {
    /**
     * Create the DOM node for a menu bar.
     */
    static createNode(): HTMLElement;
    /**
     * A convenience method to create a menu bar from a template.
     *
     * @param array - The menu item templates for the menu bar.
     *
     * @returns A new menu bar created from the menu item templates.
     */
    static fromTemplate(array: IMenuItemTemplate[]): MenuBar;
    /**
     * Construct a new menu bar.
     */
    constructor();
    /**
     * Dispose of the resources held by the menu bar.
     */
    dispose(): void;
    /**
     * Get the child menu of the menu bar.
     *
     * #### Notes
     * This will be `null` if the menu bar does not have an open menu.
     */
    childMenu: Menu;
    /**
     * Get the menu bar content node.
     *
     * #### Notes
     * This is the node which holds the menu item nodes. Modifying the
     * content of this node without care can lead to undesired behavior.
     */
    contentNode: HTMLElement;
    /**
     * Handle the DOM events for the menu bar.
     *
     * @param event - The DOM event sent to the menu bar.
     *
     * #### Notes
     * This method implements the DOM `EventListener` interface and is
     * called in response to events on the menu bar's DOM nodes. It
     * should not be called directly by user code.
     */
    handleEvent(event: Event): void;
    /**
     * A method invoked when the menu items change.
     */
    protected onItemsChanged(old: MenuItem[], items: MenuItem[]): void;
    /**
     * A method invoked when the active index changes.
     */
    protected onActiveIndexChanged(old: number, index: number): void;
    /**
     * A method invoked when a menu item should be opened.
     */
    protected onOpenItem(index: number, item: MenuItem): void;
    /**
     * A message handler invoked on a `'close-request'` message.
     */
    protected onCloseRequest(msg: Message): void;
    /**
     * A message handler invoked on an `'after-attach'` message.
     */
    protected onAfterAttach(msg: Message): void;
    /**
     * A message handler invoked on a `'before-detach'` message.
     */
    protected onBeforeDetach(msg: Message): void;
    /**
     * A handler invoked on an `'update-request'` message.
     */
    protected onUpdateRequest(msg: Message): void;
    /**
     * Handle the `'mousedown'` event for the menu bar.
     */
    private _evtMouseDown(event);
    /**
     * Handle the `'mousemove'` event for the menu bar.
     */
    private _evtMouseMove(event);
    /**
     * Handle the `'mouseleave'` event for the menu bar.
     */
    private _evtMouseLeave(event);
    /**
     * Handle the `'contextmenu'` event for the menu bar.
     */
    private _evtContextMenu(event);
    /**
     * Handle the `'keydown'` event for the menu bar.
     */
    private _evtKeyDown(event);
    /**
     * Handle the `'keypress'` event for the menu bar.
     */
    private _evtKeyPress(event);
    /**
     * Open the child menu using the given item node for location.
     */
    private _openChildMenu(menu, node);
    /**
     * Close the current child menu, if one exists.
     */
    private _closeChildMenu();
    /**
     * Activate the menu bar and switch the mouse listeners to global.
     *
     * The listeners are switched after the current event dispatch is
     * complete. Otherwise, duplicate event notifications could occur.
     */
    private _activate();
    /**
     * Deactivate the menu bar switch the mouse listeners to local.
     *
     * The listeners are switched after the current event dispatch is
     * complete. Otherwise, duplicate event notifications could occur.
     */
    private _deactivate();
    /**
     * Reset the menu bar to its default state.
     */
    private _reset();
    /**
     * Handle the `changed` signal from a menu item.
     */
    private _onItemChanged(sender, args);
    /**
     * Handle the `closed` signal from the child menu.
     */
    private _onMenuClosed(sender);
    private _active;
    private _childMenu;
    private _nodes;
}
