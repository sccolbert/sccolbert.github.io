import { IChangedArgs, Property } from 'phosphor-properties';
import { ISignal, Signal } from 'phosphor-signaling';
import { Menu } from './menu';
/**
 * A type alias for a menu item handler function.
 */
export declare type Handler = (item: MenuItem) => void;
/**
 * An options object which holds common menu item options.
 *
 * **See also:** [[IMenuItemTemplate]], [[IMenuItemOptions]]
 */
export interface IMenuItemCommon {
    /**
     * The type of the menu item.
     *
     * **See also:** [[typeProperty]]
     */
    type?: string;
    /**
     * The text for the menu item.
     *
     * **See also:** [[textProperty]]
     */
    text?: string;
    /**
     * The icon class for the menu item.
     *
     * **See also:** [[iconProperty]]
     */
    icon?: string;
    /**
     * The keyboard shortcut for the menu item.
     *
     * **See also:** [[shortcutProperty]]
     */
    shortcut?: string;
    /**
     * Whether the menu item is disabled.
     *
     * **See also:** [[disabledProperty]]
     */
    disabled?: boolean;
    /**
     * Whether the menu item is hidden.
     *
     * **See also:** [[hiddenProperty]]
     */
    hidden?: boolean;
    /**
     * Whether a `'check'` type menu item is checked.
     *
     * **See also:** [[checkedProperty]]
     */
    checked?: boolean;
    /**
     * The extra class name to associate with the menu item.
     *
     * **See also:** [[classNameProperty]]
     */
    className?: string;
    /**
     * The handler function for the menu item.
     *
     * **See also:** [[handlerProperty]]
     */
    handler?: Handler;
}
/**
 * An options object for building a menu item from a template.
 */
export interface IMenuItemTemplate extends IMenuItemCommon {
    /**
     * The template objects for the menu item submenu.
     *
     * **See also:** [[fromTemplate]]
     */
    submenu?: IMenuItemTemplate[];
}
/**
 * An options object used to initialize a menu item.
 */
export interface IMenuItemOptions extends IMenuItemCommon {
    /**
     * The submenu for the menu item.
     *
     * **See also:** [[submenuProperty]]
     */
    submenu?: Menu;
}
/**
 * An item which can be added to a menu or menu bar.
 */
export declare class MenuItem {
    /**
     * Create a menu item from a template.
     *
     * @param template - The template object for the menu item.
     *
     * @returns A new menu item created from the template.
     *
     * #### Notes
     * If a submenu template is provided, the submenu will be created
     * by calling `Menu.fromTemplate`. If a custom menu is necessary,
     * use the `MenuItem` constructor directly.
     */
    static fromTemplate(template: IMenuItemTemplate): MenuItem;
    /**
     * A signal emitted when the menu item state changes.
     *
     * **See also:** [[changed]].
     */
    static changedSignal: Signal<MenuItem, IChangedArgs<any>>;
    /**
     * The property descriptor for the menu item type.
     *
     * Valid types are: `'normal'`, `'check'`, and `'separator'`.
     *
     * #### Notes
     * If an invalid type is provided, a warning will be logged and a
     * `'normal'` type will be used instead.
     *
     * The default value is `'normal'`.
     *
     * Using a string for this value instead of an enum makes it easier
     * to create menu items from a JSON specification. For the type-safe
     * crowd, read-only getters are provided to assert the item type.
     *
     * **See also:** [[type]]
     */
    static typeProperty: Property<MenuItem, string>;
    /**
     * The property descriptor for the menu item text.
     *
     * The text may have an ampersand `&` before the character to use
     * as the mnemonic for the menu item.
     *
     * **See also:** [[text]]
     */
    static textProperty: Property<MenuItem, string>;
    /**
     * The property descriptor for the menu item icon class.
     *
     * This will be added to the class name of the menu item icon node.
     *
     * Multiple class names can be separated with whitespace.
     *
     * **See also:** [[icon]]
     */
    static iconProperty: Property<MenuItem, string>;
    /**
     * The property descriptor for the menu item shortcut.
     *
     * **See also:** [[shortcut]]
     */
    static shortcutProperty: Property<MenuItem, string>;
    /**
     * The property descriptor controlling the menu item disabled state.
     *
     * **See also:** [[disabled]]
     */
    static disabledProperty: Property<MenuItem, boolean>;
    /**
     * The property descriptor controlling the menu item hidden state.
     *
     * **See also:** [[hidden]]
     */
    static hiddenProperty: Property<MenuItem, boolean>;
    /**
     * The property descriptor controlling the menu item checked state.
     *
     * #### Notes
     * Only a `'check'` type menu item can be checked.
     *
     * **See also:** [[checked]]
     */
    static checkedProperty: Property<MenuItem, boolean>;
    /**
     * The property descriptor for the menu item class name.
     *
     * This will be added to the class name of the menu item node.
     *
     * Multiple class names can be separated with whitespace.
     *
     * **See also:** [[className]]
     */
    static classNameProperty: Property<MenuItem, string>;
    /**
     * The property descriptor for the item handler.
     *
     * This callback will be invoked when the menu item is triggered.
     *
     * **See also:** [[handler]]
     */
    static handlerProperty: Property<MenuItem, (item: MenuItem) => void>;
    /**
     * The property descriptor for the menu item submenu.
     *
     * **See also:** [[submenu]]
     */
    static submenuProperty: Property<MenuItem, Menu>;
    /**
     * Construct a new menu item.
     *
     * @param options - The initialization options for the menu item.
     */
    constructor(options?: IMenuItemOptions);
    /**
     * A signal emitted when the menu item state changes.
     *
     * #### Notes
     * This is a pure delegate to the [[changedSignal]].
     */
    changed: ISignal<MenuItem, IChangedArgs<any>>;
    /**
     * Get the type of the menu item.
     *
     * #### Notes
     * This is a pure delegate to the [[typeProperty]].
     *
     * **See also:** [[isNormalType]], [[isCheckType]], [[isSeparatorType]]
     */
    /**
     * Set the type of the menu item.
     *
     * #### Notes
     * This is a pure delegate to the [[typeProperty]].
     */
    type: string;
    /**
     * Get the text for the menu item.
     *
     * #### Notes
     * This is a pure delegate to the [[textProperty]].
     */
    /**
     * Set the text for the menu item.
     *
     * #### Notes
     * This is a pure delegate to the [[textProperty]].
     */
    text: string;
    /**
     * Get the icon class for the menu item.
     *
     * #### Notes
     * This is a pure delegate to the [[iconProperty]].
     */
    /**
     * Set the icon class for the menu item.
     *
     * #### Notes
     * This is a pure delegate to the [[iconProperty]].
     */
    icon: string;
    /**
     * Get the shortcut key for the menu item (decoration only).
     *
     * #### Notes
     * This is a pure delegate to the [[shortcutProperty]].
     */
    /**
     * Set the shortcut key for the menu item (decoration only).
     *
     * #### Notes
     * This is a pure delegate to the [[shortcutProperty]].
     */
    shortcut: string;
    /**
     * Get whether the menu item is disabled.
     *
     * #### Notes
     * This is a pure delegate to the [[disabledProperty]].
     */
    /**
     * Set whether the menu item is disabled.
     *
     * #### Notes
     * This is a pure delegate to the [[disabledProperty]].
     */
    disabled: boolean;
    /**
     * Get whether the menu item is hidden.
     *
     * #### Notes
     * This is a pure delegate to the [[hiddenProperty]].
     */
    /**
     * Set whether the menu item is hidden.
     *
     * #### Notes
     * This is a pure delegate to the [[hiddenProperty]].
     */
    hidden: boolean;
    /**
     * Get whether the menu item is checked.
     *
     * #### Notes
     * This is a pure delegate to the [[checkedProperty]].
     */
    /**
     * Set whether the menu item is checked.
     *
     * #### Notes
     * This is a pure delegate to the [[checkedProperty]].
     */
    checked: boolean;
    /**
     * Get the extra class name for the menu item.
     *
     * #### Notes
     * This is a pure delegate to the [[classNameProperty]].
     */
    /**
     * Set the extra class name for the menu item.
     *
     * #### Notes
     * This is a pure delegate to the [[classNameProperty]].
     */
    className: string;
    /**
     * Get the handler for the menu item.
     *
     * #### Notes
     * This is a pure delegate to the [[handlerProperty]].
     */
    /**
     * Set the handler for the menu item.
     *
     * #### Notes
     * This is a pure delegate to the [[handlerProperty]].
     */
    handler: Handler;
    /**
     * Get the submenu for the menu item.
     *
     * #### Notes
     * This is a pure delegate to the [[submenuProperty]].
     */
    /**
     * Set the submenu for the menu item.
     *
     * #### Notes
     * This is a pure delegate to the [[submenuProperty]].
     */
    submenu: Menu;
    /**
     * Test whether the menu item is a `'normal'` type.
     *
     * #### Notes
     * This is a read-only property.
     *
     * **See also:** [[type]], [[isCheckType]], [[isSeparatorType]]
     */
    isNormalType: boolean;
    /**
     * Test whether the menu item is a `'check'` type.
     *
     * #### Notes
     * This is a read-only property.
     *
     * **See also:** [[type]], [[isNormalType]], [[isSeparatorType]]
     */
    isCheckType: boolean;
    /**
     * Test whether the menu item is a `'separator'` type.
     *
     * #### Notes
     * This is a read-only property.
     *
     * **See also:** [[type]], [[isNormalType]], [[isCheckType]]
     */
    isSeparatorType: boolean;
}
