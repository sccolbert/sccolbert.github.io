/*-----------------------------------------------------------------------------
| Copyright (c) 2014-2015, PhosphorJS Contributors
|
| Distributed under the terms of the BSD 3-Clause License.
|
| The full license is in the file LICENSE, distributed with this software.
|----------------------------------------------------------------------------*/
'use strict';
var phosphor_properties_1 = require('phosphor-properties');
var phosphor_signaling_1 = require('phosphor-signaling');
var menu_1 = require('./menu');
/**
 * An item which can be added to a menu or menu bar.
 */
var MenuItem = (function () {
    /**
     * Construct a new menu item.
     *
     * @param options - The initialization options for the menu item.
     */
    function MenuItem(options) {
        if (options)
            initFromOptions(this, options);
    }
    /**
     * Create a menu item from a template.
     *
     * @param template - The template object for the menu item.
     *
     * @returns A new menu item created from the template.
     *
     * #### Notes
     * If a submenu template is provided, the submenu will be created
     * by calling `Menu.fromTemplate`. If a custom menu is necessary,
     * use the `MenuItem` constructor directly.
     */
    MenuItem.fromTemplate = function (template) {
        var item = new MenuItem();
        initFromTemplate(item, template);
        return item;
    };
    Object.defineProperty(MenuItem.prototype, "changed", {
        /**
         * A signal emitted when the menu item state changes.
         *
         * #### Notes
         * This is a pure delegate to the [[changedSignal]].
         */
        get: function () {
            return MenuItem.changedSignal.bind(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MenuItem.prototype, "type", {
        /**
         * Get the type of the menu item.
         *
         * #### Notes
         * This is a pure delegate to the [[typeProperty]].
         *
         * **See also:** [[isNormalType]], [[isCheckType]], [[isSeparatorType]]
         */
        get: function () {
            return MenuItem.typeProperty.get(this);
        },
        /**
         * Set the type of the menu item.
         *
         * #### Notes
         * This is a pure delegate to the [[typeProperty]].
         */
        set: function (value) {
            MenuItem.typeProperty.set(this, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MenuItem.prototype, "text", {
        /**
         * Get the text for the menu item.
         *
         * #### Notes
         * This is a pure delegate to the [[textProperty]].
         */
        get: function () {
            return MenuItem.textProperty.get(this);
        },
        /**
         * Set the text for the menu item.
         *
         * #### Notes
         * This is a pure delegate to the [[textProperty]].
         */
        set: function (value) {
            MenuItem.textProperty.set(this, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MenuItem.prototype, "icon", {
        /**
         * Get the icon class for the menu item.
         *
         * #### Notes
         * This is a pure delegate to the [[iconProperty]].
         */
        get: function () {
            return MenuItem.iconProperty.get(this);
        },
        /**
         * Set the icon class for the menu item.
         *
         * #### Notes
         * This is a pure delegate to the [[iconProperty]].
         */
        set: function (value) {
            MenuItem.iconProperty.set(this, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MenuItem.prototype, "shortcut", {
        /**
         * Get the shortcut key for the menu item (decoration only).
         *
         * #### Notes
         * This is a pure delegate to the [[shortcutProperty]].
         */
        get: function () {
            return MenuItem.shortcutProperty.get(this);
        },
        /**
         * Set the shortcut key for the menu item (decoration only).
         *
         * #### Notes
         * This is a pure delegate to the [[shortcutProperty]].
         */
        set: function (value) {
            MenuItem.shortcutProperty.set(this, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MenuItem.prototype, "disabled", {
        /**
         * Get whether the menu item is disabled.
         *
         * #### Notes
         * This is a pure delegate to the [[disabledProperty]].
         */
        get: function () {
            return MenuItem.disabledProperty.get(this);
        },
        /**
         * Set whether the menu item is disabled.
         *
         * #### Notes
         * This is a pure delegate to the [[disabledProperty]].
         */
        set: function (value) {
            MenuItem.disabledProperty.set(this, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MenuItem.prototype, "hidden", {
        /**
         * Get whether the menu item is hidden.
         *
         * #### Notes
         * This is a pure delegate to the [[hiddenProperty]].
         */
        get: function () {
            return MenuItem.hiddenProperty.get(this);
        },
        /**
         * Set whether the menu item is hidden.
         *
         * #### Notes
         * This is a pure delegate to the [[hiddenProperty]].
         */
        set: function (value) {
            MenuItem.hiddenProperty.set(this, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MenuItem.prototype, "checked", {
        /**
         * Get whether the menu item is checked.
         *
         * #### Notes
         * This is a pure delegate to the [[checkedProperty]].
         */
        get: function () {
            return MenuItem.checkedProperty.get(this);
        },
        /**
         * Set whether the menu item is checked.
         *
         * #### Notes
         * This is a pure delegate to the [[checkedProperty]].
         */
        set: function (value) {
            MenuItem.checkedProperty.set(this, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MenuItem.prototype, "className", {
        /**
         * Get the extra class name for the menu item.
         *
         * #### Notes
         * This is a pure delegate to the [[classNameProperty]].
         */
        get: function () {
            return MenuItem.classNameProperty.get(this);
        },
        /**
         * Set the extra class name for the menu item.
         *
         * #### Notes
         * This is a pure delegate to the [[classNameProperty]].
         */
        set: function (value) {
            MenuItem.classNameProperty.set(this, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MenuItem.prototype, "handler", {
        /**
         * Get the handler for the menu item.
         *
         * #### Notes
         * This is a pure delegate to the [[handlerProperty]].
         */
        get: function () {
            return MenuItem.handlerProperty.get(this);
        },
        /**
         * Set the handler for the menu item.
         *
         * #### Notes
         * This is a pure delegate to the [[handlerProperty]].
         */
        set: function (value) {
            MenuItem.handlerProperty.set(this, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MenuItem.prototype, "submenu", {
        /**
         * Get the submenu for the menu item.
         *
         * #### Notes
         * This is a pure delegate to the [[submenuProperty]].
         */
        get: function () {
            return MenuItem.submenuProperty.get(this);
        },
        /**
         * Set the submenu for the menu item.
         *
         * #### Notes
         * This is a pure delegate to the [[submenuProperty]].
         */
        set: function (value) {
            MenuItem.submenuProperty.set(this, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MenuItem.prototype, "isNormalType", {
        /**
         * Test whether the menu item is a `'normal'` type.
         *
         * #### Notes
         * This is a read-only property.
         *
         * **See also:** [[type]], [[isCheckType]], [[isSeparatorType]]
         */
        get: function () {
            return this.type === 'normal';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MenuItem.prototype, "isCheckType", {
        /**
         * Test whether the menu item is a `'check'` type.
         *
         * #### Notes
         * This is a read-only property.
         *
         * **See also:** [[type]], [[isNormalType]], [[isSeparatorType]]
         */
        get: function () {
            return this.type === 'check';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MenuItem.prototype, "isSeparatorType", {
        /**
         * Test whether the menu item is a `'separator'` type.
         *
         * #### Notes
         * This is a read-only property.
         *
         * **See also:** [[type]], [[isNormalType]], [[isCheckType]]
         */
        get: function () {
            return this.type === 'separator';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * A signal emitted when the menu item state changes.
     *
     * **See also:** [[changed]].
     */
    MenuItem.changedSignal = new phosphor_signaling_1.Signal();
    /**
     * The property descriptor for the menu item type.
     *
     * Valid types are: `'normal'`, `'check'`, and `'separator'`.
     *
     * #### Notes
     * If an invalid type is provided, a warning will be logged and a
     * `'normal'` type will be used instead.
     *
     * The default value is `'normal'`.
     *
     * Using a string for this value instead of an enum makes it easier
     * to create menu items from a JSON specification. For the type-safe
     * crowd, read-only getters are provided to assert the item type.
     *
     * **See also:** [[type]]
     */
    MenuItem.typeProperty = new phosphor_properties_1.Property({
        name: 'type',
        value: 'normal',
        coerce: coerceMenuItemType,
        changed: function (owner) { MenuItem.checkedProperty.coerce(owner); },
        notify: MenuItem.changedSignal,
    });
    /**
     * The property descriptor for the menu item text.
     *
     * The text may have an ampersand `&` before the character to use
     * as the mnemonic for the menu item.
     *
     * **See also:** [[text]]
     */
    MenuItem.textProperty = new phosphor_properties_1.Property({
        name: 'text',
        value: '',
        notify: MenuItem.changedSignal,
    });
    /**
     * The property descriptor for the menu item icon class.
     *
     * This will be added to the class name of the menu item icon node.
     *
     * Multiple class names can be separated with whitespace.
     *
     * **See also:** [[icon]]
     */
    MenuItem.iconProperty = new phosphor_properties_1.Property({
        name: 'icon',
        value: '',
        notify: MenuItem.changedSignal,
    });
    /**
     * The property descriptor for the menu item shortcut.
     *
     * **See also:** [[shortcut]]
     */
    MenuItem.shortcutProperty = new phosphor_properties_1.Property({
        name: 'shortcut',
        value: '',
        notify: MenuItem.changedSignal,
    });
    /**
     * The property descriptor controlling the menu item disabled state.
     *
     * **See also:** [[disabled]]
     */
    MenuItem.disabledProperty = new phosphor_properties_1.Property({
        name: 'disabled',
        value: false,
        notify: MenuItem.changedSignal,
    });
    /**
     * The property descriptor controlling the menu item hidden state.
     *
     * **See also:** [[hidden]]
     */
    MenuItem.hiddenProperty = new phosphor_properties_1.Property({
        name: 'hidden',
        value: false,
        notify: MenuItem.changedSignal,
    });
    /**
     * The property descriptor controlling the menu item checked state.
     *
     * #### Notes
     * Only a `'check'` type menu item can be checked.
     *
     * **See also:** [[checked]]
     */
    MenuItem.checkedProperty = new phosphor_properties_1.Property({
        name: 'checked',
        value: false,
        coerce: function (owner, val) { return owner.type === 'check' ? val : false; },
        notify: MenuItem.changedSignal,
    });
    /**
     * The property descriptor for the menu item class name.
     *
     * This will be added to the class name of the menu item node.
     *
     * Multiple class names can be separated with whitespace.
     *
     * **See also:** [[className]]
     */
    MenuItem.classNameProperty = new phosphor_properties_1.Property({
        name: 'className',
        value: '',
        notify: MenuItem.changedSignal,
    });
    /**
     * The property descriptor for the item handler.
     *
     * This callback will be invoked when the menu item is triggered.
     *
     * **See also:** [[handler]]
     */
    MenuItem.handlerProperty = new phosphor_properties_1.Property({
        name: 'handler',
        value: null,
        coerce: function (owner, value) { return value || null; },
        notify: MenuItem.changedSignal,
    });
    /**
     * The property descriptor for the menu item submenu.
     *
     * **See also:** [[submenu]]
     */
    MenuItem.submenuProperty = new phosphor_properties_1.Property({
        name: 'submenu',
        value: null,
        coerce: function (owner, value) { return value || null; },
        notify: MenuItem.changedSignal,
    });
    return MenuItem;
})();
exports.MenuItem = MenuItem;
/**
 * Initialize a menu item from a common options object.
 */
function initFromCommon(item, common) {
    if (common.type !== void 0) {
        item.type = common.type;
    }
    if (common.text !== void 0) {
        item.text = common.text;
    }
    if (common.icon !== void 0) {
        item.icon = common.icon;
    }
    if (common.shortcut !== void 0) {
        item.shortcut = common.shortcut;
    }
    if (common.disabled !== void 0) {
        item.disabled = common.disabled;
    }
    if (common.hidden !== void 0) {
        item.hidden = common.hidden;
    }
    if (common.checked !== void 0) {
        item.checked = common.checked;
    }
    if (common.className !== void 0) {
        item.className = common.className;
    }
    if (common.handler !== void 0) {
        item.handler = common.handler;
    }
}
/**
 * Initialize a menu item from a template object.
 */
function initFromTemplate(item, template) {
    initFromCommon(item, template);
    if (template.submenu !== void 0) {
        item.submenu = menu_1.Menu.fromTemplate(template.submenu);
    }
}
/**
 * Initialize a menu item from an options object.
 */
function initFromOptions(item, options) {
    initFromCommon(item, options);
    if (options.submenu !== void 0) {
        item.submenu = options.submenu;
    }
}
/**
 * The coerce handler for the menu item type.
 */
function coerceMenuItemType(owner, value) {
    if (value === 'normal' || value === 'check' || value === 'separator') {
        return value;
    }
    console.warn('invalid menu item type:', value);
    return 'normal';
}
//# sourceMappingURL=menuitem.js.map