/*-----------------------------------------------------------------------------
| Copyright (c) 2014-2015, PhosphorJS Contributors
|
| Distributed under the terms of the BSD 3-Clause License.
|
| The full license is in the file LICENSE, distributed with this software.
|----------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var arrays = require('phosphor-arrays');
var phosphor_properties_1 = require('phosphor-properties');
var phosphor_widget_1 = require('phosphor-widget');
/**
 * A base class for implementing widgets which display menu items.
 */
var MenuBase = (function (_super) {
    __extends(MenuBase, _super);
    function MenuBase() {
        _super.apply(this, arguments);
    }
    Object.defineProperty(MenuBase.prototype, "items", {
        /**
         * Get the array of menu items.
         *
         * #### Notes
         * This is a pure delegate to the [[itemsProperty]].
         */
        get: function () {
            return MenuBase.itemsProperty.get(this);
        },
        /**
         * Set the array of menu items.
         *
         * #### Notes
         * This is a pure delegate to the [[itemsProperty]].
         */
        set: function (value) {
            MenuBase.itemsProperty.set(this, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MenuBase.prototype, "activeIndex", {
        /**
         * Get the index of the active menu item.
         *
         * #### Notes
         * This is a pure delegate to the [[activeIndexProperty]].
         */
        get: function () {
            return MenuBase.activeIndexProperty.get(this);
        },
        /**
         * Set the index of the active menu item.
         *
         * #### Notes
         * This is a pure delegate to the [[activeIndexProperty]].
         */
        set: function (value) {
            MenuBase.activeIndexProperty.set(this, value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Activate the next selectable menu item.
     *
     * #### Notes
     * The search starts with the currently active item, and progresses
     * forward until the next selectable item is found. The search will
     * wrap around at the end of the menu.
     */
    MenuBase.prototype.activateNextItem = function () {
        var k = this.activeIndex + 1;
        var i = k >= this.items.length ? 0 : k;
        this.activeIndex = arrays.findIndex(this.items, isSelectable, i, true);
    };
    /**
     * Activate the previous selectable menu item.
     *
     * #### Notes
     * The search starts with the currently active item, and progresses
     * backward until the next selectable item is found. The search will
     * wrap around at the front of the menu.
     */
    MenuBase.prototype.activatePreviousItem = function () {
        var k = this.activeIndex;
        var i = k <= 0 ? this.items.length - 1 : k - 1;
        this.activeIndex = arrays.rfindIndex(this.items, isSelectable, i, true);
    };
    /**
     * Activate the next selectable menu item with the given mnemonic.
     *
     * #### Notes
     * The search starts with the currently active item, and progresses
     * forward until the next selectable item with the given mnemonic is
     * found. The search will wrap around at the end of the menu, and the
     * mnemonic matching is case-insensitive.
     */
    MenuBase.prototype.activateMnemonicItem = function (char) {
        var c = char.toUpperCase();
        var k = this.activeIndex + 1;
        var i = k >= this.items.length ? 0 : k;
        this.activeIndex = arrays.findIndex(this.items, function (item) {
            if (!isSelectable(item)) {
                return false;
            }
            var match = item.text.match(/&\w/);
            if (!match) {
                return false;
            }
            return match[0][1].toUpperCase() === c;
        }, i, true);
    };
    /**
     * Open the active menu item.
     *
     * #### Notes
     * This is a no-op if there is no active menu item, or if the active
     * menu item does not have a submenu.
     */
    MenuBase.prototype.openActiveItem = function () {
        var i = this.activeIndex;
        var item = this.items[i];
        if (item && item.submenu) {
            this.onOpenItem(i, item);
        }
    };
    /**
     * Trigger the active menu item.
     *
     * #### Notes
     * This is a no-op if there is no active menu item. If the active
     * menu item has a submenu, this is equivalent to `openActiveItem`.
     */
    MenuBase.prototype.triggerActiveItem = function () {
        var i = this.activeIndex;
        var item = this.items[i];
        if (item && item.submenu) {
            this.onOpenItem(i, item);
        }
        else if (item) {
            this.onTriggerItem(i, item);
        }
    };
    /**
     * The coerce handler for the [[activeIndexProperty]].
     *
     * #### Notes
     * Subclasses may reimplement this method as needed.
     */
    MenuBase.prototype.coerceActiveIndex = function (index) {
        var i = index | 0;
        var item = this.items[i];
        return (item && isSelectable(item)) ? i : -1;
    };
    /**
     * A method invoked when the menu items change.
     *
     * The default implementation of this method is a no-op.
     */
    MenuBase.prototype.onItemsChanged = function (old, items) { };
    /**
     * A method invoked when the active index changes.
     *
     * The default implementation of this method is a no-op.
     */
    MenuBase.prototype.onActiveIndexChanged = function (old, index) { };
    /**
     * A method invoked when a menu item should be opened.
     *
     * The default implementation of this handler is a no-op.
     */
    MenuBase.prototype.onOpenItem = function (index, item) { };
    /**
     * A method invoked when a menu item should be triggered.
     *
     * The default implementation of this handler is a no-op.
     */
    MenuBase.prototype.onTriggerItem = function (index, item) { };
    /**
     * The property descriptor for the array of menu items.
     *
     * #### Notes
     * This property creates a frozen shallow copy of the assigned items
     * array. This means that the menu items can only be changed in bulk
     * and that in-place modifications to the array are not allowed.
     *
     * **See also:** [[items]]
     */
    MenuBase.itemsProperty = new phosphor_properties_1.Property({
        name: 'items',
        value: Object.freeze([]),
        coerce: function (owner, value) { return Object.freeze(value ? value.slice() : []); },
        changed: function (owner, old, value) { return owner.onItemsChanged(old, value); },
    });
    /**
     * The property descriptor for the index of the active menu item.
     *
     * **See also:** [[activeIndex]]
     */
    MenuBase.activeIndexProperty = new phosphor_properties_1.Property({
        name: 'activeIndex',
        value: -1,
        coerce: function (owner, index) { return owner.coerceActiveIndex(index); },
        changed: function (owner, old, index) { return owner.onActiveIndexChanged(old, index); },
    });
    return MenuBase;
})(phosphor_widget_1.Widget);
exports.MenuBase = MenuBase;
/**
 * Test whether a menu item is selectable.
 */
function isSelectable(item) {
    return !item.hidden && !item.disabled && !item.isSeparatorType;
}
//# sourceMappingURL=menubase.js.map