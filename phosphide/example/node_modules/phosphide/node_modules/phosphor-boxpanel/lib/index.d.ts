import { Message } from 'phosphor-messaging';
import { Property } from 'phosphor-properties';
import { ChildMessage, Panel, ResizeMessage, Widget } from 'phosphor-widget';
/**
 * The layout direction of a box panel.
 */
export declare enum Direction {
    /**
     * Left to right direction.
     */
    LeftToRight = 0,
    /**
     * Right to left direction.
     */
    RightToLeft = 1,
    /**
     * Top to bottom direction.
     */
    TopToBottom = 2,
    /**
     * Bottom to top direction.
     */
    BottomToTop = 3,
}
/**
 * A widget which arranges its children in a single row or column.
 */
export declare class BoxPanel extends Panel {
    /**
     * A convenience alias of the `LeftToRight` [[Direction]].
     */
    static LeftToRight: Direction;
    /**
     * A convenience alias of the `RightToLeft` [[Direction]].
     */
    static RightToLeft: Direction;
    /**
     * A convenience alias of the `TopToBottom` [[Direction]].
     */
    static TopToBottom: Direction;
    /**
     * A convenience alias of the `BottomToTop` [[Direction]].
     */
    static BottomToTop: Direction;
    /**
     * The property descriptor for the box panel layout direction.
     *
     * The controls the arrangement of child widgets within the panel.
     * The default value is `TopToBottom`.
     *
     * **See also:** [[direction]]
     */
    static directionProperty: Property<BoxPanel, Direction>;
    /**
     * The property descriptor for the box panel spacing.
     *
     * The controls the fixed spacing between the child widgets, in
     * pixels. The default value is `8`.
     *
     * **See also:** [[spacing]]
     */
    static spacingProperty: Property<BoxPanel, number>;
    /**
     * The property descriptor for a widget stretch factor.
     *
     * This is an attached property which controls how much a child widget
     * stretches or shrinks relative to its siblings when the box panel is
     * resized. The default value is `0`.
     *
     * **See also:** [[getStretch]], [[setStretch]]
     */
    static stretchProperty: Property<Widget, number>;
    /**
     * The property descriptor for a widget size basis.
     *
     * This is an attached property which controls the preferred size of
     * a child widget. The widget will be initialized to this size before
     * being expanded or shrunk to fit the available layout space. The
     * default value is `0`.
     *
     * **See also:** [[getSizeBasis]], [[setSizeBasis]]
     */
    static sizeBasisProperty: Property<Widget, number>;
    /**
     * Get the box panel stretch factor for the given widget.
     *
     * @param widget - The widget of interest.
     *
     * @returns The box panel stretch factor for the widget.
     *
     * #### Notes
     * This is a pure delegate to the [[stretchProperty]].
     */
    static getStretch(widget: Widget): number;
    /**
     * Set the box panel stretch factor for the given widget.
     *
     * @param widget - The widget of interest.
     *
     * @param value - The value for the stretch factor.
     *
     * #### Notes
     * This is a pure delegate to the [[stretchProperty]].
     */
    static setStretch(widget: Widget, value: number): void;
    /**
     * Get the box panel size basis for the given widget.
     *
     * @param widget - The widget of interest.
     *
     * @returns The box panel size basis for the widget.
     *
     * #### Notes
     * This is a pure delegate to the [[sizeBasisProperty]].
     */
    static getSizeBasis(widget: Widget): number;
    /**
     * Set the box panel size basis for the given widget.
     *
     * @param widget - The widget of interest.
     *
     * @param value - The value for the size basis.
     *
     * #### Notes
     * This is a pure delegate to the [[sizeBasisProperty]].
     */
    static setSizeBasis(widget: Widget, value: number): void;
    /**
     * Construct a new box panel.
     */
    constructor();
    /**
     * Dispose of the resources held by the panel.
     */
    dispose(): void;
    /**
     * Get the layout direction for the box panel.
     *
     * #### Notes
     * This is a pure delegate to the [[directionProperty]].
     */
    /**
     * Set the layout direction for the box panel.
     *
     * #### Notes
     * This is a pure delegate to the [[directionProperty]].
     */
    direction: Direction;
    /**
     * Get the inter-element spacing for the box panel.
     *
     * #### Notes
     * This is a pure delegate to the [[spacingProperty]].
     */
    /**
     * Set the inter-element spacing for the box panel.
     *
     * #### Notes
     * This is a pure delegate to the [[spacingProperty]].
     */
    spacing: number;
    /**
     * A message handler invoked on a `'child-added'` message.
     */
    protected onChildAdded(msg: ChildMessage): void;
    /**
     * A message handler invoked on a `'child-moved'` message.
     */
    protected onChildMoved(msg: ChildMessage): void;
    /**
     * A message handler invoked on a `'child-removed'` message.
     */
    protected onChildRemoved(msg: ChildMessage): void;
    /**
     * A message handler invoked on an `'after-show'` message.
     */
    protected onAfterShow(msg: Message): void;
    /**
     * A message handler invoked on an `'after-attach'` message.
     */
    protected onAfterAttach(msg: Message): void;
    /**
     * A message handler invoked on a `'child-shown'` message.
     */
    protected onChildShown(msg: ChildMessage): void;
    /**
     * A message handler invoked on a `'child-hidden'` message.
     */
    protected onChildHidden(msg: ChildMessage): void;
    /**
     * A message handler invoked on a `'resize'` message.
     */
    protected onResize(msg: ResizeMessage): void;
    /**
     * A message handler invoked on an `'update-request'` message.
     */
    protected onUpdateRequest(msg: Message): void;
    /**
     * A message handler invoked on a `'layout-request'` message.
     */
    protected onLayoutRequest(msg: Message): void;
    /**
     * Update the size constraints of the panel.
     */
    private _setupGeometry();
    /**
     * Layout the children using the given offset width and height.
     */
    private _layoutChildren(offsetWidth, offsetHeight);
    /**
     * The change handler for the [[orientationProperty]].
     */
    private _onDirectionChanged(old, value);
    private _fixedSpace;
    private _box;
    private _sizers;
}
