import { Message } from 'phosphor-messaging';
import { IObservableList } from 'phosphor-observablelist';
import { IChangedArgs, Property } from 'phosphor-properties';
import { ISignal, Signal } from 'phosphor-signaling';
import { Title, Widget } from 'phosphor-widget';
/**
 * An object which can be added to a tab bar.
 */
export interface ITabItem {
    /**
     * The title object which provides data for the item's tab.
     *
     * #### Notes
     * This should be a read-only property.
     */
    title: Title;
}
/**
 * A widget which displays a list of tab items as a row of tabs.
 */
export declare class TabBar<T extends ITabItem> extends Widget {
    /**
     * Create the DOM node for a tab bar.
     */
    static createNode(): HTMLElement;
    /**
     * A signal emitted when the user clicks a tab item's close icon.
     *
     * **See also:** [[itemCloseRequested]]
     */
    static itemCloseRequestedSignal: Signal<TabBar<ITabItem>, ITabItem>;
    /**
     * The property descriptor for the currently selected tab item.
     *
     * **See also:** [[currentItem]]
     */
    static currentItemProperty: Property<TabBar<ITabItem>, ITabItem>;
    /**
     * The property descriptor for the observable list of tab items.
     *
     * **See also:** [[items]]
     */
    static itemsProperty: Property<TabBar<ITabItem>, IObservableList<ITabItem>>;
    /**
     * The property descriptor for whether the tabs are user-movable.
     *
     * **See also:** [[tabsMovable]]
     */
    static tabsMovableProperty: Property<TabBar<ITabItem>, boolean>;
    /**
     * Construct a new tab bar.
     */
    constructor();
    /**
     * Dispose of the resources held by the widget.
     */
    dispose(): void;
    /**
     * A signal emitted when the user clicks a tab item's close icon.
     *
     * #### Notes
     * This is a pure delegate to the [[itemCloseRequestedSignal]].
     */
    itemCloseRequested: ISignal<TabBar<T>, T>;
    /**
     * Get the currently selected tab item.
     *
     * #### Notes
     * This is a pure delegate to the [[currentItemProperty]].
     */
    /**
     * Set the currently selected tab item.
     *
     * #### Notes
     * This is a pure delegate to the [[currentItemProperty]].
     */
    currentItem: T;
    /**
     * A signal emitted when the current tab item is changed.
     *
     * #### Notes
     * This is the notify signal for the [[currentItemProperty]].
     */
    currentItemChanged: ISignal<TabBar<T>, IChangedArgs<T>>;
    /**
     * Get the list of tab items for the tab bar.
     *
     * #### Notes
     * This is a pure delegate to the [[itemsProperty]].
     */
    /**
     * Set the list tab items for the tab bar.
     *
     * #### Notes
     * This is a pure delegate to the [[itemsProperty]].
     */
    items: IObservableList<T>;
    /**
     * Get whether the tabs are movable by the user.
     *
     * #### Notes
     * This is a pure delegate to the [[tabsMovableProperty]].
     */
    /**
     * Set whether the tabs are movable by the user.
     *
     * #### Notes
     * This is a pure delegate to the [[tabsMovableProperty]].
     */
    tabsMovable: boolean;
    /**
     * Get the tab bar header node.
     *
     * #### Notes
     * This can be used to add extra header content.
     */
    headerNode: HTMLElement;
    /**
     * Get the tab bar body node.
     *
     * #### Notes
     * This can be used to add extra body content.
     */
    bodyNode: HTMLElement;
    /**
     * Get the tab bar content node.
     *
     * #### Notes
     * This is the node which holds the tab nodes. Modifying the content
     * of this node indiscriminately can lead to undesired behavior.
     */
    contentNode: HTMLElement;
    /**
     * Get the tab bar footer node.
     *
     * #### Notes
     * This can be used to add extra footer content.
     */
    footerNode: HTMLElement;
    /**
     * Release the mouse and restore the non-dragged tab positions.
     *
     * #### Notes
     * This will cause the tab bar to stop handling mouse events and to
     * restore the tabs to their non-dragged positions. It is intended
     * to be called when implementing tear off tabs.
     *
     * **See also:** [[onTearOffRequest]]
     */
    releaseMouse(): void;
    /**
     * Handle the DOM events for the tab bar.
     *
     * @param event - The DOM event sent to the tab bar.
     *
     * #### Notes
     * This method implements the DOM `EventListener` interface and is
     * called in response to events on the tab bar's DOM node. It should
     * not be called directly by user code.
     */
    handleEvent(event: Event): void;
    /**
     * Process a message sent to the tab bar.
     *
     * @param msg - The message sent to the tab bar.
     *
     * #### Notes
     * Subclasses may reimplement this method as needed.
     */
    processMessage(msg: Message): void;
    /**
     * A message handler invoked on a `'tear-off-request'` message.
     *
     * #### Notes
     * This may be reimplemented by subclasses to support tear-off tabs.
     *
     * The reimplementation should take whatever action is necessary for
     * its use case to continue the drag from the given client position.
     * This will typically involve creating a new DOM node to represent
     * the drag item, and may or may not include removing the specified
     * item from the tab bar.
     *
     * If the reimplementation handles the tear-off, it should call the
     * [[releaseMouse]] method so that the tab bar ceases its handling
     * of mouse events.
     *
     * The default implementation of this handler is a no-op.
     */
    protected onTearOffRequest(msg: TearOffMessage<T>): void;
    /**
     * A message handler invoked on an `'after-attach'` message.
     */
    protected onAfterAttach(msg: Message): void;
    /**
     * A message handler invoked on a `'before-detach'` message.
     */
    protected onBeforeDetach(msg: Message): void;
    /**
     * A message handler invoked on an `'update-request'` message.
     *
     * This handler updates the flex order and z-index of the tabs.
     */
    protected onUpdateRequest(msg: Message): void;
    /**
     * Handle the `'click'` event for the tab bar.
     */
    private _evtClick(event);
    /**
     * Handle the `'mousedown'` event for the tab bar.
     */
    private _evtMouseDown(event);
    /**
     * Handle the `'mousemove'` event for the tab bar.
     */
    private _evtMouseMove(event);
    /**
     * Handle the `'mouseup'` event for the tab bar.
     */
    private _evtMouseUp(event);
    /**
     * Release the mouse and restore the non-dragged tab positions.
     */
    private _releaseMouse();
    /**
     * The coerce handler for the [[currentItemProperty]].
     */
    private _coerceCurrentItem(item);
    /**
     * The change handler for the [[currentItemProperty]].
     */
    private _onCurrentItemChanged(oldItem, newItem);
    /**
     * The change handler for the [[itemsProperty]].
     */
    private _onItemsChanged(oldList, newList);
    /**
     * The change handler for the items list `changed` signal.
     */
    private _onItemsListChanged(sender, args);
    /**
     * The handler invoked on a items list change of type `Add`.
     */
    private _onItemsListAdd(args);
    /**
     * The handler invoked on a items list change of type `Move`.
     */
    private _onItemsListMove(args);
    /**
     * The handler invoked on a items list change of type `Remove`.
     */
    private _onItemsListRemove(args);
    /**
     * The handler invoked on a items list change of type `Replace`.
     */
    private _onItemsListReplace(args);
    /**
     * The handler invoked on a items list change of type `Set`.
     */
    private _onItemsListSet(args);
    private _tabs;
    private _dragData;
}
/**
 * A message class for `'tear-off-request'` messages.
 *
 * #### Notes
 * A message of this type is sent to a tab bar when the user drags
 * a tab beyond the tear-off threshold which surrounds the tab bar.
 */
export declare class TearOffMessage<T extends ITabItem> extends Message {
    /**
     * Construct a new tear off request message.
     *
     * @param item - The tab item being dragged by the user.
     *
     * @param node - The DOM node for the item tab.
     *
     * @param clientX - The current client X position of the mouse.
     *
     * @param clientY - The current client Y position of the mouse.
     */
    constructor(item: T, node: HTMLElement, clientX: number, clientY: number);
    /**
     * The tab item being dragged by the user.
     *
     * #### Notes
     * This is a read-only property.
     */
    item: T;
    /**
     * The DOM node which represents the tab.
     *
     * #### Notes
     * This node *must not* be removed from the DOM, but it can be cloned
     * for use as a ghost node which follows the cursor during dragging.
     *
     * This is a read-only property.
     */
    node: HTMLElement;
    /**
     * The current client X position of the mouse.
     *
     * #### Notes
     * This is a read-only property.
     */
    clientX: number;
    /**
     * The current client Y position of the mouse.
     *
     * #### Notes
     * This is a read-only property.
     */
    clientY: number;
    private _item;
    private _node;
    private _clientX;
    private _clientY;
}
