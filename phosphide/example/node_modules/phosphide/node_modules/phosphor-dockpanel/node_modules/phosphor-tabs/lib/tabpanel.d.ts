import { BoxPanel } from 'phosphor-boxpanel';
import { IChangedArgs } from 'phosphor-properties';
import { StackedPanel } from 'phosphor-stackedpanel';
import { IChildWidgetList, Widget } from 'phosphor-widget';
import { TabBar } from './tabbar';
/**
 * A panel which combines a `TabBar` and a `StackedPanel`.
 *
 * #### Notes
 * Children for this panel should be added to the [[widgets]] list.
 */
export declare class TabPanel extends BoxPanel {
    /**
     * Create the `TabBar` for the tab panel.
     *
     * @returns The tab bar to use with the tab panel.
     *
     * #### Notes
     * This may be reimplemented by a subclass to create a custom
     * tab bar for use with the tab panel.
     */
    static createTabBar(): TabBar<Widget>;
    /**
     * Create the `StackedPanel` for the tab panel.
     *
     * @returns The stacked panel to use with the tab panel.
     *
     * #### Notes
     * This may be reimplemented by a subclass to create a custom
     * stacked panel for use with the tab panel.
     */
    static createStackedPanel(): StackedPanel;
    /**
     * Construct a new tab panel.
     */
    constructor();
    /**
     * Dispose of the resources held by the widget.
     */
    dispose(): void;
    /**
     * Get the currently selected widget.
     *
     * #### Notes
     * This is a convenience alias to the `currentItem` property of the
     * tab bar.
     */
    /**
     * Set the currently selected widget.
     *
     * #### Notes
     * This is a convenience alias to the `currentItem` property of the
     * tab bar.
     */
    currentWidget: Widget;
    /**
     * Get whether the tabs are movable by the user.
     *
     * #### Notes
     * This is a convenience alias to the `tabsMovable` property of the
     * tab bar.
     */
    /**
     * Set whether the tabs are movable by the user.
     *
     * #### Notes
     * This is a convenience alias to the `tabsMovable` property of the
     * tab bar.
     */
    tabsMovable: boolean;
    /**
     * Get the observable list of widgets for the tab panel.
     *
     * #### Notes
     * Widgets to arrange in the tab panel should be added to this list.
     *
     * This is a read-only alias of the `children` property of the
     * stacked panel.
     */
    widgets: IChildWidgetList;
    /**
     * Get the tab bar associated with the tab panel.
     *
     * #### Notes
     * The items in the tab bar are automatically synchronized with the
     * children of the stacked panel.
     *
     * This is a read-only property.
     */
    tabs: TabBar<Widget>;
    /**
     * Get the stacked panel associated with the tab panel.
     *
     * #### Notes
     * The children of the stacked panel are automatically synchronized
     * with the items in the tab bar.
     *
     * This is a read-only property.
     */
    stack: StackedPanel;
    /**
     * Handle the `currentItemChanged` signal from the tab bar.
     *
     * #### Notes
     * This can be reimplemented by subclasses as needed.
     *
     * The default implementation of this method synchronizes the current
     * tab item with current widget of the stacked panel.
     */
    protected onCurrentItemChanged(sender: TabBar<Widget>, args: IChangedArgs<Widget>): void;
    /**
     * Handle the `itemCloseRequested` signal from the tab bar.
     *
     * #### Notes
     * This can be reimplemented by subclasses as needed.
     *
     * The default implementation of this method closes the widget if the
     * widget's title object has its `closable` flag set to `true`.
     */
    protected onItemCloseRequested(sender: TabBar<Widget>, args: Widget): void;
    private _tabs;
    private _stack;
}
