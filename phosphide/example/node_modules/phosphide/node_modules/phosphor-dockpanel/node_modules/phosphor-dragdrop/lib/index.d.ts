import { IDisposable } from 'phosphor-disposable';
/**
 * An enum which defines the possible independent drop actions.
 */
export declare enum DropAction {
    /**
     * No item may be dropped.
     */
    None = 0,
    /**
     * The item is copied into its new location.
     */
    Copy = 1,
    /**
     * The item is linked to its new location.
     */
    Link = 2,
    /**
     * The item is moved to its new location.
     */
    Move = 4,
}
/**
 * An enum which defines the combinations of possible drop actions.
 */
export declare enum DropActions {
    /**
     * No drop action is supported.
     */
    None = 0,
    /**
     * The item may be copied to its new location.
     */
    Copy = 1,
    /**
     * The item may be linked to its new location.
     */
    Link = 2,
    /**
     * The item may be moved to its new location.
     */
    Move = 4,
    /**
     * The item may be copied or linked to its new location.
     */
    CopyLink = 3,
    /**
     * The item may be copied or moved to its new location.
     */
    CopyMove = 5,
    /**
     * The item may be linked or moved to its new location.
     */
    LinkMove = 6,
    /**
     * The item may be copied, linked, or moved to its new location.
     */
    All = 7,
}
/**
 * A custom event type used for drag-drop operations.
 *
 * #### Notes
 * In order to receive `'p-dragover'`, `'p-dragleave'`, or `'p-drop'`
 * events, a drop target must cancel the `'p-dragenter'` event by
 * calling the event's `preventDefault` method.
 */
export interface IDragEvent extends MouseEvent {
    /**
     * The mime data associated with the event.
     *
     * #### Notes
     * This property should be considered read-only, but for performance
     * reasons this is not enforced.
     */
    mimeData: MimeData;
    /**
     * The drop action supported or taken by the drop target.
     *
     * #### Notes
     * At the start of each event, this value will be `DropAction.None`.
     * During a `'p-dragover'` event, the drop target must set this value
     * to one of the supported actions, or the drop event will not occur.
     *
     * When handling the drop event, the drop target should set this
     * to the action which was *actually* taken. This value will be
     * reported back to the drag initiator.
     */
    dropAction: DropAction;
    /**
     * The drop action proposed by the drag initiator.
     *
     * #### Notes
     * This is the action which is *preferred* by the drag initiator. The
     * drop target is not required to perform this action, but should if
     * it all possible.
     *
     * This property should be considered read-only, but for performance
     * reasons this is not enforced.
     */
    proposedAction: DropAction;
    /**
     * The drop actions supported by the drag initiator.
     *
     * #### Notes
     * If the `dropAction` is not set to one of the supported options
     * during the `'p-dragover'` event, the drop event will no occur.
     *
     * This property should be considered read-only, but for performance
     * reasons this is not enforced.
     */
    supportedActions: DropActions;
    /**
     * The source object of the drag, as provided by the drag initiator.
     *
     * #### Notes
     * For advanced applications, the drag initiator may wish to expose
     * a source object to the drop targets. That will be provided here
     * if given by the drag initiator, otherwise it will be `null`.
     *
     * This property should be considered read-only, but for performance
     * reasons this is not enforced.
     */
    source: any;
}
/**
 * An object which stores MIME data for drag-drop operations.
 *
 * #### Notes
 * This class does not attempt to enforce "correctness" of MIME types
 * and their associated data. Since this drag-drop system is designed
 * to transfer arbitrary data and objects within the same application,
 * it assumes that the user provides correct and accurate data.
 */
export declare class MimeData {
    /**
     * Get an array of the MIME types contains within the dataset.
     *
     * @returns A new array of the MIME types, in order of insertion.
     */
    types(): string[];
    /**
     * Test whether the dataset has an entry for the given type.
     *
     * @param mime - The MIME type of interest.
     *
     * @returns `true` if the dataset contains a value for the given
     *   MIME type, `false` otherwise.
     */
    hasData(mime: string): boolean;
    /**
     * Get the data value for the given MIME type.
     *
     * @param mime - The MIME type of interest.
     *
     * @returns The value for the given MIME type, or `undefined` if
     *   the dataset does not contain a value for the type.
     */
    getData(mime: string): any;
    /**
     * Set the data value for the given MIME type.
     *
     * @param mime - The MIME type of interest.
     *
     * @param data - The data value for the given MIME type.
     *
     * #### Notes
     * This will overwrite any previous entry for the MIME type.
     */
    setData(mime: string, data: any): void;
    /**
     * Remove the data entry for the given MIME type.
     *
     * @param mime - The MIME type of interest.
     *
     * #### Notes
     * This is a no-op if there is no entry for the given MIME type.
     */
    clearData(mime: string): void;
    /**
     * Remove all data entries from the dataset.
     */
    clear(): void;
    private _types;
    private _values;
}
/**
 * An options object for initializing a `Drag` object.
 */
export interface IDragOptions {
    /**
     * The populated mime data for the drag operation.
     *
     * #### Notes
     * This must be provided and should not be `null`.
     */
    mimeData: MimeData;
    /**
     * An optional drag image which follows the mouse cursor.
     *
     * #### Notes
     * The drag image can be any DOM element. It is not limited to
     * image or canvas elements as with the native drag-drop APIs.
     *
     * If provided, this will be positioned at the mouse cursor on each
     * mouse move event. A CSS transform can be used to offset the node
     * from its specified position.
     *
     * The drag image will automatically have the `p-mod-drag-image`
     * class name added.
     *
     * The default value is `null`.
     */
    dragImage?: HTMLElement;
    /**
     * The optional proposed drop action for the drag operation.
     *
     * #### Notes
     * This can be provided as a hint to the drop targets as to which
     * drop action is preferred.
     *
     * The default value is `DropAction.Copy`.
     */
    proposedAction?: DropAction;
    /**
     * The drop actions supported by the drag initiator.
     *
     * #### Notes
     * A drop target must indicate that it intends to perform one of the
     * supported actions in order to receive a drop event. However, it is
     * not required to *actually* perform that action when handling the
     * drop event. Therefore, the initiator must be prepared to handle
     * any drop action performed by a drop target.
     *
     * The default value is `DropActions.Copy`.
     */
    supportedActions?: DropActions;
    /**
     * An optional object which indicates the source of the drag.
     *
     * #### Notes
     * For advanced applications, the drag initiator may wish to expose
     * a source object to the drop targets. That object can be specified
     * here and will be carried along with the drag events.
     *
     * The default value is `null`.
     */
    source?: any;
}
/**
 * An object which manages a drag-drop operation.
 *
 * A drag object dispatches four different events to drop targets:
 *
 * - `'p-dragenter'` - Dispatched when the mouse enters the target
 *   element. This event must be canceled in order to receive any
 *   of the other events.
 *
 * - `'p-dragover'` - Dispatched when the mouse moves over the drop
 *   target. It must cancel the event and set the `dropAction` to one
 *   of the supported actions in order to receive drop events.
 *
 * - `'p-dragleave'` - Dispatched when the mouse leaves the target
 *   element. This includes moving the mouse into child elements.
 *
 * - `'p-drop'`- Dispatched when the mouse is released over the target
 *   element when the target indicates an appropriate drop action. If
 *   the event is canceled, the indicated drop action is returned to
 *   the initiator through the resolved promise.
 *
 * A drag operation can be canceled at any time by pressing `Escape`
 * or by disposing the drag object.
 *
 * #### Notes
 * This class is designed to be used when dragging and dropping custom
 * data *within* a single application. It is *not* a replacement for
 * the native drag-drop API. Instead, it provides an API which allows
 * drag operations to be initiated programmatically and enables the
 * transfer of arbitrary non-string objects; two features which are
 * not possible with the native drag-drop APIs.
 */
export declare class Drag implements IDisposable {
    /**
     * Construct a new drag object.
     *
     * @param options - The options for initializing the drag.
     */
    constructor(options: IDragOptions);
    /**
     * Dispose of the resources held by the drag object.
     *
     * #### Notes
     * This will cancel the drag operation if it is active.
     *
     * All calls made after the first call to this method are a no-op.
     */
    dispose(): void;
    /**
     * Test whether the drag object is disposed.
     *
     * #### Notes
     * This is a read-only property.
     */
    isDisposed: boolean;
    /**
     * Get the mime data for the drag object.
     *
     * #### Notes
     * This is a read-only property.
     */
    mimeData: MimeData;
    /**
     * Get the drag image element for the drag object.
     *
     * #### Notes
     * This is a read-only property.
     */
    dragImage: HTMLElement;
    /**
     * Get the proposed drop action for the drag object.
     *
     * #### Notes
     * This is a read-only property.
     */
    proposedAction: DropAction;
    /**
     * Get the supported drop actions for the drag object.
     *
     * #### Notes
     * This is a read-only property.
     */
    supportedActions: DropActions;
    /**
     * Get the drag source for the drag object.
     *
     * #### Notes
     * This is a read-only property.
     */
    source: any;
    /**
     * Start the drag operation at the specified client position.
     *
     * @param clientX - The client X position for the drag start.
     *
     * @param clientY - The client Y position for the drag start.
     *
     * @returns A promise which resolves to the result of the drag.
     *
     * #### Notes
     * If the drag has already been started, the promise created by the
     * first call to `start` is returned.
     *
     * If the drag operation has ended, or if the drag object has been
     * disposed, the returned promise will resolve to `DropAction.None`.
     *
     * The drag object will be automatically disposed when drag operation
     * completes. This makes `Drag` objects suitable for single use only.
     *
     * This method assumes the left mouse button is already held down.
     */
    start(clientX: number, clientY: number): Promise<DropAction>;
    /**
     * Handle the DOM events for the drag operation.
     *
     * @param event - The DOM event sent to the drag object.
     *
     * #### Notes
     * This method implements the DOM `EventListener` interface and is
     * called in response to events on the document. It should not be
     * called directly by user code.
     */
    handleEvent(event: Event): void;
    /**
     * Handle the `'mousemove'` event for the drag object.
     */
    private _evtMouseMove(event);
    /**
     * Handle the `'mouseup'` event for the drag object.
     */
    private _evtMouseUp(event);
    /**
     * Handle the `'keydown'` event for the drag object.
     */
    private _evtKeyDown(event);
    /**
     * Add the document event listeners for the drag object.
     */
    private _addListeners();
    /**
     * Remove the document event listeners for the drag object.
     */
    private _removeListeners();
    /**
     * Attach the drag image element at the specified location.
     *
     * This is a no-op if there is no drag image element.
     */
    private _attachDragImage(clientX, clientY);
    /**
     * Move the drag image element to the specified location.
     *
     * This is a no-op if there is no drag image element.
     */
    private _moveDragImage(clientX, clientY);
    /**
     * Detach the drag image element from the DOM.
     *
     * This is a no-op if there is no drag image element.
     */
    private _detachDragImage();
    /**
     * Set the internal drop action state and update the drag cursor.
     */
    private _setDropAction(action);
    /**
     * Finalize the drag operation and resolve the drag promise.
     */
    private _finalize(action);
    private _disposed;
    private _source;
    private _mimeData;
    private _dragImage;
    private _dropAction;
    private _proposedAction;
    private _supportedActions;
    private _override;
    private _currentTarget;
    private _currentElement;
    private _promise;
    private _resolve;
}
