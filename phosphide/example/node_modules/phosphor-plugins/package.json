{
  "name": "phosphor-plugins",
  "version": "0.4.0",
  "description": "A module for building plugin-based applications.",
  "main": "lib/index.js",
  "typings": "lib/index.d.ts",
  "dependencies": {
    "phosphor-disposable": "^1.0.5"
  },
  "devDependencies": {
    "coveralls": "^2.11.4",
    "expect.js": "^0.3.1",
    "fs-extra": "^0.26.2",
    "istanbul": "^0.3.19",
    "karma": "^0.13.9",
    "karma-chrome-launcher": "^0.2.0",
    "karma-coverage": "^0.5.0",
    "karma-firefox-launcher": "^0.1.6",
    "karma-ie-launcher": "^0.2.0",
    "karma-mocha": "^0.2.0",
    "karma-mocha-reporter": "^1.1.1",
    "karma-systemjs": "^0.9.0",
    "mocha": "^2.2.5",
    "rimraf": "^2.4.2",
    "system-css": "^0.1.0",
    "systemjs": "^0.19.6",
    "systemjs-plugin-json": "^0.1.0",
    "typedoc": "^0.3.11",
    "typescript": "^1.6.2"
  },
  "scripts": {
    "clean": "rimraf lib && rimraf test/build && rimraf test/coverage",
    "clean:examples": "node scripts/clean-examples.js",
    "build:src": "tsc --project src",
    "build:test": "tsc --project test/src",
    "build": "npm run build:src && npm run build:test",
    "build:examples": "node scripts/build-examples.js",
    "docs": "rimraf docs/api && typedoc --options scripts/tdoptions.json",
    "prepublish": "npm run build",
    "postinstall": "npm dedupe",
    "test:chrome": "karma start --browsers=Chrome test/karma.conf.js",
    "test:coverage": "karma start --browsers=Firefox test/karma-cov.conf.js",
    "test:firefox": "karma start --browsers=Firefox test/karma.conf.js",
    "test:ie": "karma start --browsers=IE test/karma.conf.js",
    "test": "npm run test:firefox"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/phophorjs/phosphor-plugins.git"
  },
  "files": [
    "lib/*.js",
    "lib/*.d.ts"
  ],
  "keywords": [
    "application",
    "extension",
    "extensions",
    "plugin",
    "plugins",
    "point",
    "points"
  ],
  "author": {
    "name": "S. Chris Colbert",
    "email": "sccolbert@gmail.com"
  },
  "license": "BSD-3-Clause",
  "bugs": {
    "url": "https://github.com/phophorjs/phosphor-plugins/issues"
  },
  "homepage": "https://github.com/phophorjs/phosphor-plugins",
  "readme": "phosphor-plugins\r\n================\r\n\r\n[![Build Status](https://travis-ci.org/phosphorjs/phosphor-plugins.svg)](https://travis-ci.org/phosphorjs/phosphor-plugins?branch=master)\r\n[![Coverage Status](https://coveralls.io/repos/phosphorjs/phosphor-plugins/badge.svg?branch=master&service=github)](https://coveralls.io/github/phosphorjs/phosphor-plugins?branch=master)\r\n\r\nA module for building plugin-based applications.\r\n\r\n[API Docs](http://phosphorjs.github.io/phosphor-plugins/api/)\r\n\r\n\r\nPackage Install\r\n---------------\r\n\r\n**Prerequisites**\r\n- [node](http://nodejs.org/)\r\n\r\n```bash\r\nnpm install --save phosphor-plugins\r\n```\r\n\r\n\r\nSource Build\r\n------------\r\n\r\n**Prerequisites**\r\n- [git](http://git-scm.com/)\r\n- [node](http://nodejs.org/)\r\n\r\n```bash\r\ngit clone https://github.com/phosphorjs/phosphor-plugins.git\r\ncd phosphor-plugins\r\nnpm install\r\n```\r\n\r\n**Rebuild**\r\n```bash\r\nnpm run clean\r\nnpm run build\r\n```\r\n\r\n\r\nRun Tests\r\n---------\r\n\r\nFollow the source build instructions first.\r\n\r\n```bash\r\n# run tests in Firefox\r\nnpm test\r\n\r\n# run tests in Chrome\r\nnpm run test:chrome\r\n\r\n# run tests in IE\r\nnpm run test:ie\r\n```\r\n\r\n\r\nBuild Docs\r\n----------\r\n\r\nFollow the source build instructions first.\r\n\r\n```bash\r\nnpm run docs\r\n```\r\n\r\nNavigate to `docs/index.html`.\r\n\r\n\r\nBuild Examples\r\n--------------\r\n\r\nFollow the source build instructions first.\r\n\r\n```bash\r\nnpm run build:examples\r\n```\r\n\r\nNavigate to one of the `examples/` and start a server.\r\n\r\n\r\nSupported Runtimes\r\n------------------\r\n\r\nThe runtime versions which are currently *known to work* are listed below.\r\nEarlier versions may also work, but come with no guarantees.\r\n\r\n- IE 11+\r\n- Firefox 32+\r\n- Chrome 38+\r\n\r\n\r\nPlugin Specification\r\n--------------------\r\n\r\nPlugins are specified with a top-level `phosphor-plugin.json` file placed in\r\nthe root directory of a package. When a plugin named `foo` is registered, the\r\n`foo/phosphor-plugin.json` file will be imported and used for configuration.\r\n\r\nThe `phosphor-plugin.json` file is an object with the following properties:\r\n\r\n- `extensionPoints` - Optional. An array of extension point specifications.\r\n- `extensions` - Optional. An array of extension specifications.\r\n\r\nAn extension point is specified as an object with the following fields:\r\n\r\n- `id` - *Required*. The globally unique id of the extension point.\r\n- `main` - *Optional*. The path to the extension point main module. This\r\n  path is assumed to be relative to the plugin. For example, for a plugin\r\n  named `foo` and an extension point `main` path of `lib/index.js`, the\r\n  `foo/lib/index.js` module is loaded.\r\n- `factory` - *Optional*. The name of a function in the `main` module which\r\n  creates the receiver for the extension point. The function should take\r\n  no arguments and return `void | IReceiver | Promise<IReceiver>`.\r\n\r\nAn extension is specified as an object with the following fields:\r\n\r\n- `id` - *Required*. The globally unique id of the extension.\r\n- `point` - *Required*. The identifier of the target extension point.\r\n- `main` - *Optional*. The path to the extension main module. This path is\r\n  assumed to be relative to the plugin. For example, for a plugin named `bar`\r\n  and an extension `main` path of `lib/index.js`, the `bar/lib/index.js`\r\n  module is loaded.\r\n- `factory` - *Optional*. The name of a function in the `main` module which\r\n  creates the contribution for the extension. The function should take no\r\n  arguments and return `void | IContribution | Promise<IContribution>`.\r\n- `data` - *Optional*. The path to the JSON data file for the extension. Some\r\n  extension points are able to consume data from JSON files, such as menu and\r\n  key binding specifications. This path is relative to the plugin.\r\n- `config` - *Optional*. Extra static configuration data for the extension.\r\n  Some extension points are able to consume static configuration data along\r\n  with the actual extension object.\r\n\r\nPaths are loaded using `System.import`, which must be configured to load the\r\nplugin package by name.  See the `examples/` folder for configurations using\r\n`SystemJS` and `StealJS`.\r\n\r\n\r\nUsage Examples\r\n--------------\r\n\r\n**Note:** This module is fully compatible with Node/Babel/ES6/ES5. Simply\r\nomit the type declarations when using a language other than TypeScript.\r\n\r\nRegister a plugin and load its JSON specification. The plugin's extensions\r\nand extension points are automatically registered. For each extension, the\r\nregistry is scanned for a matching extension point. If a match is found,\r\nthe extension and extension point are instantiated and paired.\r\n\r\n```typescript\r\nimport {\r\n  listPlugins, registerPlugin\r\n} from 'phosphor-plugins';\r\n\r\nlet disposable = registerPlugin('my-plugin');\r\n\r\nconsole.log(listPlugins());  // ['my-plugin']\r\n\r\ndisposable.dispose();        // unregister and unload the plugin\r\n```\r\n\r\nDynamically register an extension point which is created at runtime:\r\n\r\n```typescript\r\nimport {\r\n  IExtensionPoint, registerExtensionPoint\r\n} from 'phosphor-plugins';\r\n\r\nlet point: IExtensionPoint = {\r\n\r\n  id: 'my-plugin:my-dynamic-point',\r\n\r\n  plugin: 'my-package',\r\n\r\n  isDisposed: false,\r\n\r\n  dispose: () => {\r\n    point.isDisposed = true;\r\n    console.log('disposed');\r\n  },\r\n\r\n  add: extension => {\r\n    console.log('Add extension', extension.id, extension.item);\r\n  },\r\n\r\n  remove: id => {\r\n    console.log('Remove extension', id);\r\n  },\r\n};\r\n\r\nregisterExtensionPoint(point);\r\n```\r\n\r\nDynamically register an extension which is created at runtime:\r\n\r\n```typescript\r\nimport {\r\n  IExtension, registerExtension\r\n} from 'phosphor-plugins';\r\n\r\nlet ext: IExtension = {\r\n\r\n  id: 'my-other-plugin:my-dynamic-ext',\r\n\r\n  point: 'my-plugin:my-dynamic-point',\r\n\r\n  plugin: 'my-other-package',\r\n\r\n  item: { value: 42 },\r\n\r\n  data: null,\r\n\r\n  config: null,\r\n\r\n  isDisposed: false,\r\n\r\n  dispose: () => {\r\n    ext.isDisposed = true,\r\n    console.log('disposed');\r\n  },\r\n};\r\n\r\nregisterExtension(ext);\r\n```\r\n",
  "readmeFilename": "README.md",
  "gitHead": "a5e7e5c392b8f8f6db4ffeef704acd80b5891e9d",
  "_id": "phosphor-plugins@0.4.0",
  "_shasum": "04b13f9d9d139bd666e2f8a9dd935934ba3c0082",
  "_from": "phosphor-plugins@>=0.4.0 <0.5.0"
}
