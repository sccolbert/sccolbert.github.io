{
  "name": "phosphor-messaging",
  "version": "1.0.5",
  "description": "A module for inter-object message passing.",
  "main": "lib/index.js",
  "typings": "lib/index.d.ts",
  "dependencies": {
    "phosphor-queue": "^1.0.4"
  },
  "devDependencies": {
    "coveralls": "^2.11.4",
    "expect.js": "^0.3.1",
    "istanbul": "^0.3.19",
    "mocha": "^2.2.5",
    "rimraf": "^2.4.2",
    "typedoc": "^0.3.11",
    "typescript": "^1.6.2"
  },
  "scripts": {
    "clean": "rimraf lib && rimraf test/build && rimraf test/coverage",
    "build:src": "tsc --project src",
    "build:test": "tsc --project test/src",
    "build": "npm run build:src && npm run build:test",
    "docs": "rimraf docs/api && typedoc --options scripts/tdoptions.json",
    "prepublish": "npm run build",
    "test": "mocha test/build/index.js",
    "test:coverage": "istanbul cover --dir test/coverage node_modules/mocha/bin/_mocha -- test/build/index.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/phosphorjs/phosphor-messaging.git"
  },
  "files": [
    "lib/index.js",
    "lib/index.d.ts"
  ],
  "keywords": [
    "message",
    "messaging"
  ],
  "author": {
    "name": "S. Chris Colbert",
    "email": "sccolbert@gmail.com"
  },
  "license": "BSD-3-Clause",
  "bugs": {
    "url": "https://github.com/phosphorjs/phosphor-messaging/issues"
  },
  "homepage": "https://github.com/phosphorjs/phosphor-messaging",
  "readme": "phosphor-messaging\r\n==================\r\n\r\n[![Build Status](https://travis-ci.org/phosphorjs/phosphor-messaging.svg)](https://travis-ci.org/phosphorjs/phosphor-messaging?branch=master)\r\n[![Coverage Status](https://coveralls.io/repos/phosphorjs/phosphor-messaging/badge.svg?branch=master&service=github)](https://coveralls.io/github/phosphorjs/phosphor-messaging?branch=master)\r\n\r\nA module for inter-object message passing.\r\n\r\n[API Docs](http://phosphorjs.github.io/phosphor-messaging/api/)\r\n\r\n\r\nPackage Install\r\n---------------\r\n\r\n**Prerequisites**\r\n- [node](http://nodejs.org/)\r\n\r\n```bash\r\nnpm install --save phosphor-messaging\r\n```\r\n\r\n\r\nSource Build\r\n------------\r\n\r\n**Prerequisites**\r\n- [git](http://git-scm.com/)\r\n- [node](http://nodejs.org/)\r\n\r\n```bash\r\ngit clone https://github.com/phosphorjs/phosphor-messaging.git\r\ncd phosphor-messaging\r\nnpm install\r\n```\r\n\r\n**Rebuild**\r\n```bash\r\nnpm run clean\r\nnpm run build\r\n```\r\n\r\n\r\nRun Tests\r\n---------\r\n\r\nFollow the source build instructions first.\r\n\r\n```bash\r\nnpm test\r\n```\r\n\r\n\r\nBuild Docs\r\n----------\r\n\r\nFollow the source build instructions first.\r\n\r\n```bash\r\nnpm run docs\r\n```\r\n\r\nNavigate to `docs/index.html`.\r\n\r\n\r\nSupported Runtimes\r\n------------------\r\n\r\nThe runtime versions which are currently *known to work* are listed below.\r\nEarlier versions may also work, but come with no guarantees.\r\n\r\n- Node 0.12.7+\r\n- IE 11+\r\n- Firefox 32+\r\n- Chrome 38+\r\n\r\n\r\nBundle for the Browser\r\n----------------------\r\n\r\nFollow the package install instructions first.\r\n\r\n```bash\r\nnpm install --save-dev browserify\r\nbrowserify myapp.js -o mybundle.js\r\n```\r\n\r\n\r\nUsage Examples\r\n--------------\r\n\r\n**Note:** This module is fully compatible with Node/Babel/ES6/ES5. Simply\r\nomit the type declarations when using a language other than TypeScript.\r\n\r\n**Send a message to a message handler for immediate processing:**\r\n\r\nThe `sendMessage` function delivers the messages synchronously, for\r\nimmediate processing by the message handler.\r\n\r\n```typescript\r\nimport { IMessageHandler, Message, sendMessage } from 'phosphor-messaging';\r\n\r\n\r\nclass Handler implements IMessageHandler {\r\n\r\n  processMessage(msg: Message): void {\r\n    console.log(msg.type);\r\n  }\r\n}\r\n\r\nvar handler = new Handler();\r\nsendMessage(handler, new Message('one'));    // logs 'one'\r\nsendMessage(handler, new Message('two'));\t // logs 'two'\r\nsendMessage(handler, new Message('three'));  // logs 'three'\r\n```\r\n\r\n**Post a message to a message handler for future processing:**\r\n\r\nThe `postMessage` function delivers the messages asynchronously, for\r\nprocessing by the message handler on the next cycle of the event loop.\r\n\r\n```typescript\r\nimport { postMessage } from 'phosphor-messaging';\r\n\r\n\r\npostMessage(handler, new Message('one'));\r\npostMessage(handler, new Message('two'));\r\npostMessage(handler, new Message('three'));\r\n\r\n// sometime later: logs 'one', 'two', then 'three'.\r\n```\r\n\r\n**Create custom messages which hold extra data:**\r\n\r\n```typescript\r\nclass ValueMessage extends Message {\r\n\r\n  constructor(value: number) {\r\n    super('value');\r\n    this._value = value;\r\n  }\r\n\r\n  get value(): number {\r\n    return this._value;\r\n  }\r\n\r\n  private _value: number;\r\n}\r\n\r\n\r\nclass ValueHandler extends Handler {\r\n\r\n  processMessage(msg: Message): void {\r\n    if (msg.type === 'value') {\r\n      console.log('value: ', (<ValueMessage>msg).value);\r\n    } else {\r\n      super.processMessage(msg);\r\n    }\r\n  }\r\n}\r\n\r\n\r\nvar handler = new ValueHandler();\r\nsendMessage(handler, new Message('one'));    // logs 'one'\r\npostMessage(handler, new Message('two'));\r\nsendMessage(handler, new ValueMessage(42));  // logs 42\r\npostMessage(handler, new ValueMessage(43));\r\n\r\n// sometime later: logs 'two' then 43\r\n```\r\n\r\n**Compress posted messages to reduce duplicate work:**\r\n\r\n```typescript\r\nimport { Queue } from 'phosphor-queue';\r\n\r\n\r\nclass ExpensiveWorker extends Handler {\r\n\r\n  processMessage(msg: Message): void {\r\n    if (msg.type === 'expensive') {\r\n      console.log('do something expensive');\r\n    } else {\r\n      super.processMessage(msg);\r\n    }\r\n  }\r\n\r\n  compressMessage(msg: Message, pending: Queue<Message>): boolean {\r\n    if (msg.type === 'expensive') {\r\n       return pending.some(other => other.type === 'expensive');\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\n\r\nvar handler = new ExpensiveWorker();\r\npostMessage(handler, new Message('one'));\r\npostMessage(handler, new Message('expensive'));\r\npostMessage(handler, new Message('two'));\r\npostMessage(handler, new Message('expensive'));\r\npostMessage(handler, new Message('expensive'));\r\npostMessage(handler, new Message('three'));\r\npostMessage(handler, new Message('expensive'));\r\n\r\n// sometime later: logs 'one', 'do something expensive', 'two', then 'three'\r\n```\r\n\r\n**Test for, and preemptively deliver, posted messages:**\r\n\r\n```typescript\r\nimport { hasPendingMessages, sendPendingMessage } from 'phosphor-messaging';\r\n\r\n\r\npostMessage(handler, new Message('one'));\r\npostMessage(handler, new Message('two'));\r\npostMessage(handler, new Message('three'));\r\n\r\nhasPendingMessages(handler);  // true\r\n\r\nsendPendingMessage(handler);  // logs 'one'\r\nsendPendingMessage(handler);  // logs 'two'\r\n\r\n// sometime later: logs 'three'.\r\n```\r\n\r\n**Install message filters to spy on or restrict message processing:**\r\n\r\n```typescript\r\nimport {\r\n  IMessageFilter, installMessageFilter, removeMessageFilter\r\n} from 'phosphor-messaging';\r\n\r\n\r\nclass MessageSpy implements IMessageFilter {\r\n\r\n  filterMessage(handler: IMessageHandler, msg: Message): boolean {\r\n  \tconsole.log('spy:', msg.type);\r\n  \treturn false;\r\n  }\r\n}\r\n\r\n\r\nclass FilterTwo implements IMessageFilter {\r\n\r\n  filterMessage(handler: IMessageHandler, msg: Message): boolean {\r\n  \treturn msg.type === 'two';\r\n  }\r\n}\r\n\r\n\r\nvar handler = new Handler();\r\nvar spy = new MessageSpy();\r\nvar filter = new FilterTwo();\r\n\r\nsendMessage(handler, new Message('two'));  // logs 'two'\r\n\r\ninstallMessageFilter(handler, spy);\r\n\r\nsendMessage(handler, new Message('two'));  // logs 'spy: two', then 'two'\r\n\r\ninstallMessageFilter(handler, filter);\r\n\r\nsendMessage(handler, new Message('two'));  // logs nothing\r\n\r\ninstallMessageFilter(handler, spy);\r\n\r\nsendMessage(handler, new Message('two'));  // logs 'spy: two'\r\n\r\nremoveMessageFilter(handler, filter);\r\n\r\nsendMessage(handler, new Message('two'));  // logs 'spy: two', 'spy: two', then 'two'\r\n\r\nremoveMessageFilter(handler, spy);\r\n\r\nsendMessage(handler, new Message('two'));  // logs 'two'\r\n```\r\n\r\n**Clear all message data associated with a handler:**\r\n\r\n```typescript\r\nimport { clearMessageData } from 'phosphor-messaging';\r\n\r\n\r\n// clear everything - posted messages *and* filters\r\nclearMessageData(handler);\r\n```\r\n",
  "readmeFilename": "README.md",
  "gitHead": "bafcbe63b78ad7f445d22c22af80e9fe0b5672c5",
  "_id": "phosphor-messaging@1.0.5",
  "_shasum": "cd1d3f6362c6410a932d1546f7c9d8b235b66b56",
  "_from": "phosphor-messaging@1.0.5"
}
